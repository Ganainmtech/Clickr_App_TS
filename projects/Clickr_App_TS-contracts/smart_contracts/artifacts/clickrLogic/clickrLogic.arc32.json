{
    "hints": {
        "createApplication()void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "optIn()void": {
            "call_config": {
                "opt_in": "CALL"
            }
        },
        "recordClick()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getClickCount(account)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getHighestClickCount(account)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getHeartCount(account)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getUserAllTimeClickCount(account)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "clickProcessed(account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "decrementHeart(account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "distributeRewards()void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 1,
            "num_uints": 1
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 4
        }
    },
    "schema": {
        "global": {
            "declared": {
                "highestClickCount": {
                    "type": "uint64",
                    "key": "g"
                },
                "highestClickCountAddress": {
                    "type": "bytes",
                    "key": "d"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {
                "useAllTimeClickCount": {
                    "type": "uint64",
                    "key": "l"
                },
                "userClickCount": {
                    "type": "uint64",
                    "key": "a"
                },
                "userHeartCount": {
                    "type": "uint64",
                    "key": "b"
                },
                "userHighestClickCount": {
                    "type": "uint64",
                    "key": "c"
                }
            },
            "reserved": {}
        }
    },
    "contract": {
        "name": "clickrLogic",
        "methods": [
            {
                "name": "createApplication",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "optIn",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "recordClick",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "getClickCount",
                "args": [
                    {
                        "type": "account",
                        "name": "user"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "getHighestClickCount",
                "args": [
                    {
                        "type": "account",
                        "name": "user"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "getHeartCount",
                "args": [
                    {
                        "type": "account",
                        "name": "user"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "getUserAllTimeClickCount",
                "args": [
                    {
                        "type": "account",
                        "name": "user"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "clickProcessed",
                "args": [
                    {
                        "type": "account",
                        "name": "user"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "decrementHeart",
                "args": [
                    {
                        "type": "account",
                        "name": "user"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "distributeRewards",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Distributes the contract's balance to the user with the highest global click count.\nThe fee is set to 0 so the sender of the app call covers the transaction fee.\nThe sender of the payment is the smart contract's own balance."
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}