{
  "version": 3,
  "sources": [
    "/Users/sarajane/Documents/AlgoKitProjects/Clickr/Clickr_App_TS/projects/Clickr_App_TS-contracts/smart_contracts/clickrLogic/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;AAcA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;;AA2IG;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AA9HH;;;AAAA;AAAA;;AA8HG;;;AAAA;;AArCA;;AAAA;AAAA;AAAA;;AAAA;AAzFH;;;AAAA;AAAA;;AAyFG;;;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AApFH;;;AAAA;AAAA;;AAoFG;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AA9EH;;;AAAA;AAAA;;AA8EG;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAxEH;;;AAAA;AAAA;;AAwEG;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAlEH;;;AAAA;AAAA;;AAkEG;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AATA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AA1B8C;;AA+BP;AAAtC;AA5BqD;AA6BR;;AAA7C;AApBwC;;AAsBR;;AAAhC;;AAMwB;;AAzBiB;AAyBM;AAA/C;AACwB;;AAvBiB;AAuBM;;AAA/C;AAC+B;;AArBiB;;AAqBM;AAAtD;AAC8B;;AAnBiB;;AAmBM;AAArD;;AAIF;;;AAGmB;;AAAX;;AAGC;;AAAA;AAAP;AAEiC;AAAA;AArCQ;AAqCR;AAAA;AAAjC;AAG+C;AA3CN;AA2CM;AAAA;AAAA;AAAA;;AAAA;AAA1B;;;;;AACmC;AAAtB;AAAlC;;AAAA;AAAA;;AA5CyC;AA4CzC;;AAAA;AAnC+C;;AAoC/C;AAAA;;AAF+D;;;;AAMjE;;;AAEmC;;AAAA;AAnDQ;AAmDR;AAAA;AAAA;AAAA;;AAAA;AAA1B;;;;;AAAP;AAAA;AAAiD;;;;AAInD;;;AAE0C;;AAAA;AAnDQ;;AAmDR;AAAA;AAAA;AAAA;;AAAA;AAAjC;;;;;AAAP;AAAA;AAAwD;;;;AAI1D;;;AAEmC;;AAAA;AA5DQ;AA4DR;AAAA;AAAA;AAAA;;AAAA;AAA1B;;;;;AAAP;AAAA;AAAiD;;;;AAInD;;;AAEyC;;AAAA;AA5DQ;;AA4DR;AAAA;AAAA;AAAA;;AAAA;AAAhC;;;;;AAAP;AAAA;AAAuD;;;;AAGzD;;;;;AAGa;;AA9E6B;AAAA;;AAAA;AAAA;AA8EjC;AAAP;AAGgD;;AAAA;AA9EP;AA8EO;AAAA;AAAA;AAAA;;AAAA;AACO;;AAAA;AAzEP;;AAyEO;AAAA;AAGnD;AAAJ;;;AAEE;;AA9E8C;;AA8E9C;;AAAA;AAnG2C;AAAA;;AAAA;AAAA;AAuGzC;;AAAA;AAAJ;;;AAvG6C;;AAwG3C;;AAAA;AArGmD;AAsGnD;;AAAA;AAII;;AAA2C;;;AAAvB;AAApB;AAAA;;AACN;;;AACE;AAnGsC;AAAA;;AAAA;AAAA;;;;;;;AAmGtC;;;AAIS;;;AAJT;AAUF;;AA1GyC;AA0GA;AAAzC;;AAGF;;;AAEmC;;AAAA;AA5GQ;AA4GR;AAAA;AAAjC;AAG0B;;AAAA;AA/Ge;AA+Gf;AAAA;AAAS;AAAnC;AAAA;;AA/GyC;AA+GzC;;AAAA;;AAc0B;;AAGyB;;AAAA;AAAyB;;AAA3C;AAGjC;AAAA;AAlJqD;AAAA;AAAA;AAAA;AAqJC;;AAA/C;AAAP;AAGA;AAxJqD;AAAA;AAAA;AAAA;;;;;AAwJrD;;;AAIS;;;AAJT;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock \"a\" \"b\" 0x151f7c75 \"d\" \"c\" \"g\" \"e\" \"l\""
    },
    "26": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "28": {
      "op": "bz main_after_if_else@16",
      "stack_out": []
    },
    "31": {
      "op": "pushbytess 0xb8447b36 0x29314d95 0xfd62c66d 0x9e20fc26 0x21667e86 0xfbaf678f 0x2421d9c3 0x593338da 0x59fbdace 0xb0a93807 // method \"createApplication()void\", method \"optIn()void\", method \"recordClick()void\", method \"getClickCount(account)uint64\", method \"getHighestClickCount(account)uint64\", method \"getHeartCount(account)uint64\", method \"getUserAllTimeClickCount(account)uint64\", method \"clickProcessed(account)void\", method \"decrementHeart(account)void\", method \"distributeRewards()void\"",
      "defined_out": [
        "Method(clickProcessed(account)void)",
        "Method(createApplication()void)",
        "Method(decrementHeart(account)void)",
        "Method(distributeRewards()void)",
        "Method(getClickCount(account)uint64)",
        "Method(getHeartCount(account)uint64)",
        "Method(getHighestClickCount(account)uint64)",
        "Method(getUserAllTimeClickCount(account)uint64)",
        "Method(optIn()void)",
        "Method(recordClick()void)"
      ],
      "stack_out": [
        "Method(createApplication()void)",
        "Method(optIn()void)",
        "Method(recordClick()void)",
        "Method(getClickCount(account)uint64)",
        "Method(getHighestClickCount(account)uint64)",
        "Method(getHeartCount(account)uint64)",
        "Method(getUserAllTimeClickCount(account)uint64)",
        "Method(clickProcessed(account)void)",
        "Method(decrementHeart(account)void)",
        "Method(distributeRewards()void)"
      ]
    },
    "83": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(clickProcessed(account)void)",
        "Method(createApplication()void)",
        "Method(decrementHeart(account)void)",
        "Method(distributeRewards()void)",
        "Method(getClickCount(account)uint64)",
        "Method(getHeartCount(account)uint64)",
        "Method(getHighestClickCount(account)uint64)",
        "Method(getUserAllTimeClickCount(account)uint64)",
        "Method(optIn()void)",
        "Method(recordClick()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(createApplication()void)",
        "Method(optIn()void)",
        "Method(recordClick()void)",
        "Method(getClickCount(account)uint64)",
        "Method(getHighestClickCount(account)uint64)",
        "Method(getHeartCount(account)uint64)",
        "Method(getUserAllTimeClickCount(account)uint64)",
        "Method(clickProcessed(account)void)",
        "Method(decrementHeart(account)void)",
        "Method(distributeRewards()void)",
        "tmp%2#0"
      ]
    },
    "86": {
      "op": "match main_createApplication_route@3 main_optIn_route@4 main_recordClick_route@5 main_getClickCount_route@6 main_getHighestClickCount_route@7 main_getHeartCount_route@8 main_getUserAllTimeClickCount_route@9 main_clickProcessed_route@10 main_decrementHeart_route@11 main_distributeRewards_route@12",
      "stack_out": []
    },
    "108": {
      "block": "main_after_if_else@16",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "109": {
      "op": "return",
      "stack_out": []
    },
    "110": {
      "block": "main_distributeRewards_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "112": {
      "op": "!",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "113": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "114": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "116": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "117": {
      "callsub": "smart_contracts/clickrLogic/contract.algo.ts::clickrLogic.distributeRewards",
      "op": "callsub distributeRewards"
    },
    "120": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "121": {
      "op": "return",
      "stack_out": []
    },
    "122": {
      "block": "main_decrementHeart_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "124": {
      "op": "!",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "125": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "126": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "128": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "129": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%5#0"
      ]
    },
    "132": {
      "op": "btoi",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "133": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "135": {
      "callsub": "smart_contracts/clickrLogic/contract.algo.ts::clickrLogic.decrementHeart",
      "op": "callsub decrementHeart",
      "stack_out": []
    },
    "138": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "139": {
      "op": "return",
      "stack_out": []
    },
    "140": {
      "block": "main_clickProcessed_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "142": {
      "op": "!",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "143": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "144": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "146": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "147": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%4#0"
      ]
    },
    "150": {
      "op": "btoi",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "151": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "153": {
      "callsub": "smart_contracts/clickrLogic/contract.algo.ts::clickrLogic.clickProcessed",
      "op": "callsub clickProcessed",
      "stack_out": []
    },
    "156": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "157": {
      "op": "return",
      "stack_out": []
    },
    "158": {
      "block": "main_getUserAllTimeClickCount_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "160": {
      "op": "!",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "161": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "162": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "164": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "165": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%3#0"
      ]
    },
    "168": {
      "op": "btoi",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "169": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "171": {
      "callsub": "smart_contracts/clickrLogic/contract.algo.ts::clickrLogic.getUserAllTimeClickCount",
      "op": "callsub getUserAllTimeClickCount",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "174": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0"
      ]
    },
    "175": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0",
        "0x151f7c75"
      ]
    },
    "176": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ]
    },
    "177": {
      "op": "concat",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "178": {
      "op": "log",
      "stack_out": []
    },
    "179": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "180": {
      "op": "return",
      "stack_out": []
    },
    "181": {
      "block": "main_getHeartCount_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "183": {
      "op": "!",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "184": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "185": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "187": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "188": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%2#0"
      ]
    },
    "191": {
      "op": "btoi",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "192": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "194": {
      "callsub": "smart_contracts/clickrLogic/contract.algo.ts::clickrLogic.getHeartCount",
      "op": "callsub getHeartCount",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "197": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "198": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "0x151f7c75"
      ]
    },
    "199": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ]
    },
    "200": {
      "op": "concat",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "201": {
      "op": "log",
      "stack_out": []
    },
    "202": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "203": {
      "op": "return",
      "stack_out": []
    },
    "204": {
      "block": "main_getHighestClickCount_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "206": {
      "op": "!",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "207": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "208": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "210": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "211": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "214": {
      "op": "btoi",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "215": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "217": {
      "callsub": "smart_contracts/clickrLogic/contract.algo.ts::clickrLogic.getHighestClickCount",
      "op": "callsub getHighestClickCount",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "220": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "221": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "222": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "223": {
      "op": "concat",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "224": {
      "op": "log",
      "stack_out": []
    },
    "225": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "226": {
      "op": "return",
      "stack_out": []
    },
    "227": {
      "block": "main_getClickCount_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "229": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "230": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "231": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "233": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "234": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "237": {
      "op": "btoi",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "238": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "240": {
      "callsub": "smart_contracts/clickrLogic/contract.algo.ts::clickrLogic.getClickCount",
      "op": "callsub getClickCount",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "243": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "244": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "245": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "246": {
      "op": "concat",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "247": {
      "op": "log",
      "stack_out": []
    },
    "248": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "249": {
      "op": "return",
      "stack_out": []
    },
    "250": {
      "block": "main_recordClick_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "252": {
      "op": "!",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "253": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "254": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "256": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "257": {
      "callsub": "smart_contracts/clickrLogic/contract.algo.ts::clickrLogic.recordClick",
      "op": "callsub recordClick"
    },
    "260": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "261": {
      "op": "return",
      "stack_out": []
    },
    "262": {
      "block": "main_optIn_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "264": {
      "op": "intc_1 // OptIn",
      "defined_out": [
        "OptIn",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "OptIn"
      ]
    },
    "265": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "266": {
      "error": "OnCompletion is not OptIn",
      "op": "assert // OnCompletion is not OptIn",
      "stack_out": []
    },
    "267": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "269": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "270": {
      "callsub": "smart_contracts/clickrLogic/contract.algo.ts::clickrLogic.optIn",
      "op": "callsub optIn"
    },
    "273": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "274": {
      "op": "return",
      "stack_out": []
    },
    "275": {
      "block": "main_createApplication_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "277": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "278": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "279": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "281": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "282": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "283": {
      "callsub": "smart_contracts/clickrLogic/contract.algo.ts::clickrLogic.createApplication",
      "op": "callsub createApplication"
    },
    "286": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "287": {
      "op": "return",
      "stack_out": []
    },
    "288": {
      "subroutine": "smart_contracts/clickrLogic/contract.algo.ts::clickrLogic.createApplication",
      "params": {},
      "block": "createApplication",
      "stack_in": [],
      "op": "bytec 5 // \"g\"",
      "defined_out": [
        "\"g\""
      ],
      "stack_out": [
        "\"g\""
      ]
    },
    "290": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"g\"",
        "0"
      ],
      "stack_out": [
        "\"g\"",
        "0"
      ]
    },
    "291": {
      "op": "app_global_put",
      "stack_out": []
    },
    "292": {
      "op": "bytec_3 // \"d\"",
      "defined_out": [
        "\"d\""
      ],
      "stack_out": [
        "\"d\""
      ]
    },
    "293": {
      "op": "global CreatorAddress",
      "defined_out": [
        "\"d\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"d\"",
        "new_state_value%0#0"
      ]
    },
    "295": {
      "op": "app_global_put",
      "stack_out": []
    },
    "296": {
      "op": "bytec 6 // \"e\"",
      "defined_out": [
        "\"e\""
      ],
      "stack_out": [
        "\"e\""
      ]
    },
    "298": {
      "op": "global CreatorAddress",
      "defined_out": [
        "\"e\"",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "\"e\"",
        "new_state_value%1#0"
      ]
    },
    "300": {
      "op": "app_global_put",
      "stack_out": []
    },
    "301": {
      "retsub": true,
      "op": "retsub"
    },
    "302": {
      "subroutine": "smart_contracts/clickrLogic/contract.algo.ts::clickrLogic.optIn",
      "params": {},
      "block": "optIn",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "304": {
      "op": "bytec_0 // \"a\"",
      "defined_out": [
        "\"a\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"a\""
      ]
    },
    "305": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"a\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"a\"",
        "0"
      ]
    },
    "306": {
      "op": "app_local_put",
      "stack_out": []
    },
    "307": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "309": {
      "op": "bytec_1 // \"b\"",
      "defined_out": [
        "\"b\"",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "\"b\""
      ]
    },
    "310": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "\"b\"",
        "5",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "\"b\"",
        "5"
      ]
    },
    "312": {
      "op": "app_local_put",
      "stack_out": []
    },
    "313": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "315": {
      "op": "bytec 4 // \"c\"",
      "defined_out": [
        "\"c\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "\"c\""
      ]
    },
    "317": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "\"c\"",
        "0"
      ]
    },
    "318": {
      "op": "app_local_put",
      "stack_out": []
    },
    "319": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "321": {
      "op": "bytec 7 // \"l\"",
      "defined_out": [
        "\"l\"",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "\"l\""
      ]
    },
    "323": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%3#0",
        "\"l\"",
        "0"
      ]
    },
    "324": {
      "op": "app_local_put",
      "stack_out": []
    },
    "325": {
      "retsub": true,
      "op": "retsub"
    },
    "326": {
      "subroutine": "smart_contracts/clickrLogic/contract.algo.ts::clickrLogic.recordClick",
      "params": {},
      "block": "recordClick",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "329": {
      "op": "txn Sender"
    },
    "331": {
      "op": "dupn 2",
      "defined_out": [
        "tmp%0#0",
        "user#0"
      ],
      "stack_out": [
        "user#0",
        "user#0",
        "tmp%0#0"
      ]
    },
    "333": {
      "op": "dig 1",
      "defined_out": [
        "tmp%0#0",
        "user#0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "user#0",
        "user#0",
        "tmp%0#0",
        "user#0 (copy)"
      ]
    },
    "335": {
      "op": "==",
      "defined_out": [
        "tmp%1#0",
        "user#0"
      ],
      "stack_out": [
        "user#0",
        "user#0",
        "tmp%1#0"
      ]
    },
    "336": {
      "error": "Only the user can record a click",
      "op": "assert // Only the user can record a click",
      "stack_out": [
        "user#0",
        "user#0"
      ]
    },
    "337": {
      "op": "dup",
      "stack_out": [
        "user#0",
        "user#0",
        "user#0 (copy)"
      ]
    },
    "338": {
      "op": "intc_0 // 0",
      "stack_out": [
        "user#0",
        "user#0",
        "user#0 (copy)",
        "0"
      ]
    },
    "339": {
      "op": "bytec_1 // \"b\"",
      "defined_out": [
        "\"b\"",
        "0",
        "user#0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "user#0",
        "user#0",
        "user#0 (copy)",
        "0",
        "\"b\""
      ]
    },
    "340": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "user#0"
      ],
      "stack_out": [
        "user#0",
        "user#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "341": {
      "error": "check LocalState exists",
      "op": "assert // check LocalState exists",
      "stack_out": [
        "user#0",
        "user#0",
        "maybe_value%0#0"
      ]
    },
    "342": {
      "error": "Only if user hearts are above 0 record click",
      "op": "assert // Only if user hearts are above 0 record click",
      "stack_out": [
        "user#0",
        "user#0"
      ]
    },
    "343": {
      "op": "intc_0 // 0",
      "stack_out": [
        "user#0",
        "user#0",
        "0"
      ]
    },
    "344": {
      "op": "bytec_0 // \"a\"",
      "defined_out": [
        "\"a\"",
        "0",
        "user#0"
      ],
      "stack_out": [
        "user#0",
        "user#0",
        "0",
        "\"a\""
      ]
    },
    "345": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "user#0"
      ],
      "stack_out": [
        "user#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "346": {
      "op": "swap",
      "stack_out": [
        "user#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ]
    },
    "347": {
      "op": "dup",
      "stack_out": [
        "user#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ]
    },
    "348": {
      "op": "uncover 2",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "user#0"
      ],
      "stack_out": [
        "user#0",
        "maybe_value%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "350": {
      "error": "check LocalState exists",
      "op": "assert // check LocalState exists",
      "stack_out": [
        "user#0",
        "maybe_value%1#0",
        "maybe_value%1#0"
      ]
    },
    "351": {
      "op": "bz recordClick_ternary_false@2",
      "stack_out": [
        "user#0",
        "maybe_value%1#0"
      ]
    },
    "354": {
      "op": "frame_dig 1",
      "defined_out": [
        "currentCount#0",
        "maybe_value%1#0",
        "user#0"
      ],
      "stack_out": [
        "user#0",
        "maybe_value%1#0",
        "currentCount#0"
      ]
    },
    "356": {
      "block": "recordClick_ternary_merge@3",
      "stack_in": [
        "user#0",
        "maybe_value%1#0",
        "currentCount#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "currentCount#0"
      ],
      "stack_out": [
        "user#0",
        "maybe_value%1#0",
        "currentCount#0",
        "1"
      ]
    },
    "357": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "user#0",
        "maybe_value%1#0",
        "new_state_value%0#0"
      ]
    },
    "358": {
      "op": "frame_dig 0",
      "defined_out": [
        "new_state_value%0#0",
        "user#0"
      ],
      "stack_out": [
        "user#0",
        "maybe_value%1#0",
        "new_state_value%0#0",
        "user#0"
      ]
    },
    "360": {
      "op": "dup",
      "defined_out": [
        "new_state_value%0#0",
        "user#0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "user#0",
        "maybe_value%1#0",
        "new_state_value%0#0",
        "user#0 (copy)",
        "user#0 (copy)"
      ]
    },
    "361": {
      "op": "cover 2",
      "stack_out": [
        "user#0",
        "maybe_value%1#0",
        "user#0",
        "new_state_value%0#0",
        "user#0 (copy)"
      ]
    },
    "363": {
      "op": "bytec_0 // \"a\"",
      "defined_out": [
        "\"a\"",
        "new_state_value%0#0",
        "user#0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "user#0",
        "maybe_value%1#0",
        "user#0",
        "new_state_value%0#0",
        "user#0 (copy)",
        "\"a\""
      ]
    },
    "364": {
      "op": "dig 2",
      "defined_out": [
        "\"a\"",
        "new_state_value%0#0",
        "new_state_value%0#0 (copy)",
        "user#0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "user#0",
        "maybe_value%1#0",
        "user#0",
        "new_state_value%0#0",
        "user#0 (copy)",
        "\"a\"",
        "new_state_value%0#0 (copy)"
      ]
    },
    "366": {
      "op": "app_local_put",
      "stack_out": [
        "user#0",
        "maybe_value%1#0",
        "user#0",
        "new_state_value%0#0"
      ]
    },
    "367": {
      "op": "bytec 7 // \"l\""
    },
    "369": {
      "op": "swap",
      "defined_out": [
        "\"l\"",
        "new_state_value%0#0",
        "user#0"
      ],
      "stack_out": [
        "user#0",
        "maybe_value%1#0",
        "user#0",
        "\"l\"",
        "new_state_value%0#0"
      ]
    },
    "370": {
      "op": "app_local_put",
      "stack_out": [
        "user#0",
        "maybe_value%1#0"
      ]
    },
    "371": {
      "retsub": true,
      "op": "retsub"
    },
    "372": {
      "block": "recordClick_ternary_false@2",
      "stack_in": [
        "user#0",
        "maybe_value%1#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "currentCount#0"
      ],
      "stack_out": [
        "user#0",
        "maybe_value%1#0",
        "currentCount#0"
      ]
    },
    "373": {
      "op": "b recordClick_ternary_merge@3"
    },
    "376": {
      "subroutine": "smart_contracts/clickrLogic/contract.algo.ts::clickrLogic.getClickCount",
      "params": {
        "user#0": "bytes"
      },
      "block": "getClickCount",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "379": {
      "op": "frame_dig -1",
      "defined_out": [
        "user#0 (copy)"
      ],
      "stack_out": [
        "user#0 (copy)"
      ]
    },
    "381": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "user#0 (copy)",
        "0"
      ]
    },
    "382": {
      "op": "bytec_0 // \"a\"",
      "defined_out": [
        "\"a\"",
        "0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "user#0 (copy)",
        "0",
        "\"a\""
      ]
    },
    "383": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "384": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "385": {
      "op": "dup",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "386": {
      "op": "uncover 2",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "388": {
      "error": "check LocalState exists",
      "op": "assert // check LocalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0"
      ]
    },
    "389": {
      "op": "bz getClickCount_ternary_false@2",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "392": {
      "op": "frame_dig 0",
      "defined_out": [
        "maybe_value%0#0",
        "ternary_result%0#1"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "ternary_result%0#1"
      ]
    },
    "394": {
      "block": "getClickCount_ternary_merge@3",
      "stack_in": [
        "maybe_value%0#0",
        "ternary_result%0#1"
      ],
      "op": "swap",
      "defined_out": [
        "ternary_result%0#1"
      ]
    },
    "395": {
      "retsub": true,
      "op": "retsub"
    },
    "396": {
      "block": "getClickCount_ternary_false@2",
      "stack_in": [
        "maybe_value%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "ternary_result%0#1"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "ternary_result%0#1"
      ]
    },
    "397": {
      "op": "b getClickCount_ternary_merge@3"
    },
    "400": {
      "subroutine": "smart_contracts/clickrLogic/contract.algo.ts::clickrLogic.getHighestClickCount",
      "params": {
        "user#0": "bytes"
      },
      "block": "getHighestClickCount",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "403": {
      "op": "frame_dig -1",
      "defined_out": [
        "user#0 (copy)"
      ],
      "stack_out": [
        "user#0 (copy)"
      ]
    },
    "405": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "user#0 (copy)",
        "0"
      ]
    },
    "406": {
      "op": "bytec 4 // \"c\"",
      "defined_out": [
        "\"c\"",
        "0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "user#0 (copy)",
        "0",
        "\"c\""
      ]
    },
    "408": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "409": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "410": {
      "op": "dup",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "411": {
      "op": "uncover 2",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "413": {
      "error": "check LocalState exists",
      "op": "assert // check LocalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0"
      ]
    },
    "414": {
      "op": "bz getHighestClickCount_ternary_false@2",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "417": {
      "op": "frame_dig 0",
      "defined_out": [
        "maybe_value%0#0",
        "ternary_result%0#1"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "ternary_result%0#1"
      ]
    },
    "419": {
      "block": "getHighestClickCount_ternary_merge@3",
      "stack_in": [
        "maybe_value%0#0",
        "ternary_result%0#1"
      ],
      "op": "swap",
      "defined_out": [
        "ternary_result%0#1"
      ]
    },
    "420": {
      "retsub": true,
      "op": "retsub"
    },
    "421": {
      "block": "getHighestClickCount_ternary_false@2",
      "stack_in": [
        "maybe_value%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "ternary_result%0#1"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "ternary_result%0#1"
      ]
    },
    "422": {
      "op": "b getHighestClickCount_ternary_merge@3"
    },
    "425": {
      "subroutine": "smart_contracts/clickrLogic/contract.algo.ts::clickrLogic.getHeartCount",
      "params": {
        "user#0": "bytes"
      },
      "block": "getHeartCount",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "428": {
      "op": "frame_dig -1",
      "defined_out": [
        "user#0 (copy)"
      ],
      "stack_out": [
        "user#0 (copy)"
      ]
    },
    "430": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "user#0 (copy)",
        "0"
      ]
    },
    "431": {
      "op": "bytec_1 // \"b\"",
      "defined_out": [
        "\"b\"",
        "0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "user#0 (copy)",
        "0",
        "\"b\""
      ]
    },
    "432": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "433": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "434": {
      "op": "dup",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "435": {
      "op": "uncover 2",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "437": {
      "error": "check LocalState exists",
      "op": "assert // check LocalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0"
      ]
    },
    "438": {
      "op": "bz getHeartCount_ternary_false@2",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "441": {
      "op": "frame_dig 0",
      "defined_out": [
        "maybe_value%0#0",
        "ternary_result%0#1"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "ternary_result%0#1"
      ]
    },
    "443": {
      "block": "getHeartCount_ternary_merge@3",
      "stack_in": [
        "maybe_value%0#0",
        "ternary_result%0#1"
      ],
      "op": "swap",
      "defined_out": [
        "ternary_result%0#1"
      ]
    },
    "444": {
      "retsub": true,
      "op": "retsub"
    },
    "445": {
      "block": "getHeartCount_ternary_false@2",
      "stack_in": [
        "maybe_value%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "ternary_result%0#1"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "ternary_result%0#1"
      ]
    },
    "446": {
      "op": "b getHeartCount_ternary_merge@3"
    },
    "449": {
      "subroutine": "smart_contracts/clickrLogic/contract.algo.ts::clickrLogic.getUserAllTimeClickCount",
      "params": {
        "user#0": "bytes"
      },
      "block": "getUserAllTimeClickCount",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "452": {
      "op": "frame_dig -1",
      "defined_out": [
        "user#0 (copy)"
      ],
      "stack_out": [
        "user#0 (copy)"
      ]
    },
    "454": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "user#0 (copy)",
        "0"
      ]
    },
    "455": {
      "op": "bytec 7 // \"l\"",
      "defined_out": [
        "\"l\"",
        "0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "user#0 (copy)",
        "0",
        "\"l\""
      ]
    },
    "457": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "458": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "459": {
      "op": "dup",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "460": {
      "op": "uncover 2",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "462": {
      "error": "check LocalState exists",
      "op": "assert // check LocalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0"
      ]
    },
    "463": {
      "op": "bz getUserAllTimeClickCount_ternary_false@2",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "466": {
      "op": "frame_dig 0",
      "defined_out": [
        "maybe_value%0#0",
        "ternary_result%0#1"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "ternary_result%0#1"
      ]
    },
    "468": {
      "block": "getUserAllTimeClickCount_ternary_merge@3",
      "stack_in": [
        "maybe_value%0#0",
        "ternary_result%0#1"
      ],
      "op": "swap",
      "defined_out": [
        "ternary_result%0#1"
      ]
    },
    "469": {
      "retsub": true,
      "op": "retsub"
    },
    "470": {
      "block": "getUserAllTimeClickCount_ternary_false@2",
      "stack_in": [
        "maybe_value%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "ternary_result%0#1"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "ternary_result%0#1"
      ]
    },
    "471": {
      "op": "b getUserAllTimeClickCount_ternary_merge@3"
    },
    "474": {
      "subroutine": "smart_contracts/clickrLogic/contract.algo.ts::clickrLogic.clickProcessed",
      "params": {
        "user#0": "bytes"
      },
      "block": "clickProcessed",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "477": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "feeAmount#0"
      ]
    },
    "479": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "feeAmount#0",
        "tmp%0#0"
      ]
    },
    "481": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "feeAmount#0",
        "tmp%0#0",
        "0"
      ]
    },
    "482": {
      "op": "bytec 6 // \"e\"",
      "defined_out": [
        "\"e\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "feeAmount#0",
        "tmp%0#0",
        "0",
        "\"e\""
      ]
    },
    "484": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "feeAmount#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "485": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "feeAmount#0",
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "486": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "feeAmount#0",
        "tmp%1#0"
      ]
    },
    "487": {
      "error": "Only cron account can process clicks",
      "op": "assert // Only cron account can process clicks",
      "stack_out": [
        "feeAmount#0"
      ]
    },
    "488": {
      "op": "frame_dig -1",
      "defined_out": [
        "user#0 (copy)"
      ],
      "stack_out": [
        "feeAmount#0",
        "user#0 (copy)"
      ]
    },
    "490": {
      "op": "intc_0 // 0",
      "stack_out": [
        "feeAmount#0",
        "user#0 (copy)",
        "0"
      ]
    },
    "491": {
      "op": "bytec_0 // \"a\"",
      "defined_out": [
        "\"a\"",
        "0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "feeAmount#0",
        "user#0 (copy)",
        "0",
        "\"a\""
      ]
    },
    "492": {
      "op": "app_local_get_ex",
      "defined_out": [
        "currentClicks#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "feeAmount#0",
        "currentClicks#0",
        "maybe_exists%1#0"
      ]
    },
    "493": {
      "op": "swap",
      "stack_out": [
        "feeAmount#0",
        "maybe_exists%1#0",
        "currentClicks#0"
      ]
    },
    "494": {
      "op": "dup",
      "stack_out": [
        "feeAmount#0",
        "maybe_exists%1#0",
        "currentClicks#0",
        "currentClicks#0 (copy)"
      ]
    },
    "495": {
      "op": "uncover 2",
      "defined_out": [
        "currentClicks#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "feeAmount#0",
        "currentClicks#0",
        "currentClicks#0",
        "maybe_exists%1#0"
      ]
    },
    "497": {
      "error": "check LocalState exists",
      "op": "assert // check LocalState exists",
      "stack_out": [
        "feeAmount#0",
        "currentClicks#0",
        "currentClicks#0"
      ]
    },
    "498": {
      "op": "frame_dig -1",
      "stack_out": [
        "feeAmount#0",
        "currentClicks#0",
        "currentClicks#0",
        "user#0 (copy)"
      ]
    },
    "500": {
      "op": "intc_0 // 0",
      "stack_out": [
        "feeAmount#0",
        "currentClicks#0",
        "currentClicks#0",
        "user#0 (copy)",
        "0"
      ]
    },
    "501": {
      "op": "bytec 4 // \"c\"",
      "defined_out": [
        "\"c\"",
        "0",
        "currentClicks#0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "feeAmount#0",
        "currentClicks#0",
        "currentClicks#0",
        "user#0 (copy)",
        "0",
        "\"c\""
      ]
    },
    "503": {
      "op": "app_local_get_ex",
      "defined_out": [
        "currentClicks#0",
        "highestClicks#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "feeAmount#0",
        "currentClicks#0",
        "currentClicks#0",
        "highestClicks#0",
        "maybe_exists%2#0"
      ]
    },
    "504": {
      "error": "check LocalState exists",
      "op": "assert // check LocalState exists",
      "stack_out": [
        "feeAmount#0",
        "currentClicks#0",
        "currentClicks#0",
        "highestClicks#0"
      ]
    },
    "505": {
      "op": ">",
      "defined_out": [
        "currentClicks#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "feeAmount#0",
        "currentClicks#0",
        "tmp%2#0"
      ]
    },
    "506": {
      "op": "bz clickProcessed_after_if_else@2",
      "stack_out": [
        "feeAmount#0",
        "currentClicks#0"
      ]
    },
    "509": {
      "op": "frame_dig -1",
      "stack_out": [
        "feeAmount#0",
        "currentClicks#0",
        "user#0 (copy)"
      ]
    },
    "511": {
      "op": "bytec 4 // \"c\"",
      "stack_out": [
        "feeAmount#0",
        "currentClicks#0",
        "user#0 (copy)",
        "\"c\""
      ]
    },
    "513": {
      "op": "frame_dig 1",
      "stack_out": [
        "feeAmount#0",
        "currentClicks#0",
        "user#0 (copy)",
        "\"c\"",
        "currentClicks#0"
      ]
    },
    "515": {
      "op": "app_local_put",
      "stack_out": [
        "feeAmount#0",
        "currentClicks#0"
      ]
    },
    "516": {
      "block": "clickProcessed_after_if_else@2",
      "stack_in": [
        "feeAmount#0",
        "currentClicks#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "feeAmount#0",
        "currentClicks#0",
        "0"
      ]
    },
    "517": {
      "op": "bytec 5 // \"g\"",
      "defined_out": [
        "\"g\"",
        "0"
      ],
      "stack_out": [
        "feeAmount#0",
        "currentClicks#0",
        "0",
        "\"g\""
      ]
    },
    "519": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "feeAmount#0",
        "currentClicks#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "520": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "feeAmount#0",
        "currentClicks#0",
        "maybe_value%3#0"
      ]
    },
    "521": {
      "op": "frame_dig 1",
      "defined_out": [
        "currentClicks#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "feeAmount#0",
        "currentClicks#0",
        "maybe_value%3#0",
        "currentClicks#0"
      ]
    },
    "523": {
      "op": "<",
      "defined_out": [
        "currentClicks#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "feeAmount#0",
        "currentClicks#0",
        "tmp%3#0"
      ]
    },
    "524": {
      "op": "bz clickProcessed_after_if_else@4",
      "stack_out": [
        "feeAmount#0",
        "currentClicks#0"
      ]
    },
    "527": {
      "op": "bytec 5 // \"g\"",
      "stack_out": [
        "feeAmount#0",
        "currentClicks#0",
        "\"g\""
      ]
    },
    "529": {
      "op": "frame_dig 1",
      "stack_out": [
        "feeAmount#0",
        "currentClicks#0",
        "\"g\"",
        "currentClicks#0"
      ]
    },
    "531": {
      "op": "app_global_put",
      "stack_out": [
        "feeAmount#0",
        "currentClicks#0"
      ]
    },
    "532": {
      "op": "bytec_3 // \"d\"",
      "defined_out": [
        "\"d\"",
        "currentClicks#0"
      ],
      "stack_out": [
        "feeAmount#0",
        "currentClicks#0",
        "\"d\""
      ]
    },
    "533": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"d\"",
        "currentClicks#0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "feeAmount#0",
        "currentClicks#0",
        "\"d\"",
        "user#0 (copy)"
      ]
    },
    "535": {
      "op": "app_global_put",
      "stack_out": [
        "feeAmount#0",
        "currentClicks#0"
      ]
    },
    "536": {
      "block": "clickProcessed_after_if_else@4",
      "stack_in": [
        "feeAmount#0",
        "currentClicks#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "currentClicks#0"
      ],
      "stack_out": [
        "feeAmount#0",
        "currentClicks#0",
        "currentClicks#0"
      ]
    },
    "538": {
      "op": "pushint 1000 // 1000",
      "defined_out": [
        "1000",
        "currentClicks#0"
      ],
      "stack_out": [
        "feeAmount#0",
        "currentClicks#0",
        "currentClicks#0",
        "1000"
      ]
    },
    "541": {
      "op": "*",
      "defined_out": [
        "currentClicks#0",
        "feeAmount#0"
      ],
      "stack_out": [
        "feeAmount#0",
        "currentClicks#0",
        "feeAmount#0"
      ]
    },
    "542": {
      "op": "dup",
      "stack_out": [
        "feeAmount#0",
        "currentClicks#0",
        "feeAmount#0",
        "feeAmount#0"
      ]
    },
    "543": {
      "op": "frame_bury 0",
      "defined_out": [
        "currentClicks#0",
        "feeAmount#0"
      ],
      "stack_out": [
        "feeAmount#0",
        "currentClicks#0",
        "feeAmount#0"
      ]
    },
    "545": {
      "op": "bz clickProcessed_after_if_else@7",
      "stack_out": [
        "feeAmount#0",
        "currentClicks#0"
      ]
    },
    "548": {
      "op": "itxn_begin"
    },
    "549": {
      "op": "intc_0 // 0",
      "stack_out": [
        "feeAmount#0",
        "currentClicks#0",
        "0"
      ]
    },
    "550": {
      "op": "bytec 6 // \"e\"",
      "defined_out": [
        "\"e\"",
        "0",
        "currentClicks#0",
        "feeAmount#0"
      ],
      "stack_out": [
        "feeAmount#0",
        "currentClicks#0",
        "0",
        "\"e\""
      ]
    },
    "552": {
      "op": "app_global_get_ex",
      "defined_out": [
        "currentClicks#0",
        "feeAmount#0",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "feeAmount#0",
        "currentClicks#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "553": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "feeAmount#0",
        "currentClicks#0",
        "maybe_value%4#0"
      ]
    },
    "554": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "feeAmount#0",
        "currentClicks#0"
      ]
    },
    "556": {
      "op": "frame_dig 0",
      "stack_out": [
        "feeAmount#0",
        "currentClicks#0",
        "feeAmount#0"
      ]
    },
    "558": {
      "op": "itxn_field Amount",
      "stack_out": [
        "feeAmount#0",
        "currentClicks#0"
      ]
    },
    "560": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "currentClicks#0",
        "feeAmount#0"
      ],
      "stack_out": [
        "feeAmount#0",
        "currentClicks#0",
        "1"
      ]
    },
    "561": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "feeAmount#0",
        "currentClicks#0"
      ]
    },
    "563": {
      "op": "intc_0 // 0",
      "stack_out": [
        "feeAmount#0",
        "currentClicks#0",
        "0"
      ]
    },
    "564": {
      "op": "itxn_field Fee",
      "stack_out": [
        "feeAmount#0",
        "currentClicks#0"
      ]
    },
    "566": {
      "op": "itxn_submit"
    },
    "567": {
      "block": "clickProcessed_after_if_else@7",
      "stack_in": [
        "feeAmount#0",
        "currentClicks#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "user#0 (copy)"
      ],
      "stack_out": [
        "feeAmount#0",
        "currentClicks#0",
        "user#0 (copy)"
      ]
    },
    "569": {
      "op": "bytec_0 // \"a\"",
      "defined_out": [
        "\"a\"",
        "user#0 (copy)"
      ],
      "stack_out": [
        "feeAmount#0",
        "currentClicks#0",
        "user#0 (copy)",
        "\"a\""
      ]
    },
    "570": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"a\"",
        "0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "feeAmount#0",
        "currentClicks#0",
        "user#0 (copy)",
        "\"a\"",
        "0"
      ]
    },
    "571": {
      "op": "app_local_put",
      "stack_out": [
        "feeAmount#0",
        "currentClicks#0"
      ]
    },
    "572": {
      "retsub": true,
      "op": "retsub"
    },
    "573": {
      "subroutine": "smart_contracts/clickrLogic/contract.algo.ts::clickrLogic.decrementHeart",
      "params": {
        "user#0": "bytes"
      },
      "block": "decrementHeart",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "576": {
      "op": "frame_dig -1",
      "defined_out": [
        "user#0 (copy)"
      ],
      "stack_out": [
        "user#0 (copy)"
      ]
    },
    "578": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "user#0 (copy)",
        "0"
      ]
    },
    "579": {
      "op": "bytec_1 // \"b\"",
      "defined_out": [
        "\"b\"",
        "0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "user#0 (copy)",
        "0",
        "\"b\""
      ]
    },
    "580": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "581": {
      "error": "check LocalState exists",
      "op": "assert // check LocalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "582": {
      "error": "To decrement hearts there has to be atleast 1",
      "op": "assert // To decrement hearts there has to be atleast 1",
      "stack_out": []
    },
    "583": {
      "op": "frame_dig -1",
      "stack_out": [
        "user#0 (copy)"
      ]
    },
    "585": {
      "op": "intc_0 // 0",
      "stack_out": [
        "user#0 (copy)",
        "0"
      ]
    },
    "586": {
      "op": "bytec_1 // \"b\"",
      "stack_out": [
        "user#0 (copy)",
        "0",
        "\"b\""
      ]
    },
    "587": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "588": {
      "error": "check LocalState exists",
      "op": "assert // check LocalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "589": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "1"
      ]
    },
    "590": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "591": {
      "op": "frame_dig -1",
      "stack_out": [
        "new_state_value%0#0",
        "user#0 (copy)"
      ]
    },
    "593": {
      "op": "bytec_1 // \"b\"",
      "stack_out": [
        "new_state_value%0#0",
        "user#0 (copy)",
        "\"b\""
      ]
    },
    "594": {
      "op": "uncover 2",
      "stack_out": [
        "user#0 (copy)",
        "\"b\"",
        "new_state_value%0#0"
      ]
    },
    "596": {
      "op": "app_local_put",
      "stack_out": []
    },
    "597": {
      "retsub": true,
      "op": "retsub"
    },
    "598": {
      "subroutine": "smart_contracts/clickrLogic/contract.algo.ts::clickrLogic.distributeRewards",
      "params": {},
      "block": "distributeRewards",
      "stack_in": [],
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "appAddress#0"
      ],
      "stack_out": [
        "appAddress#0"
      ]
    },
    "600": {
      "op": "acct_params_get AcctBalance",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "602": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "value%0#0"
      ]
    },
    "603": {
      "op": "global MinBalance",
      "defined_out": [
        "tmp%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "tmp%0#0"
      ]
    },
    "605": {
      "op": "-",
      "defined_out": [
        "availableBalance#0"
      ],
      "stack_out": [
        "availableBalance#0"
      ]
    },
    "606": {
      "op": "dup",
      "defined_out": [
        "availableBalance#0",
        "availableBalance#0 (copy)"
      ],
      "stack_out": [
        "availableBalance#0",
        "availableBalance#0 (copy)"
      ]
    },
    "607": {
      "error": "No available balance to send",
      "op": "assert // No available balance to send",
      "stack_out": [
        "availableBalance#0"
      ]
    },
    "608": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "availableBalance#0"
      ],
      "stack_out": [
        "availableBalance#0",
        "0"
      ]
    },
    "609": {
      "op": "bytec_3 // \"d\"",
      "defined_out": [
        "\"d\"",
        "0",
        "availableBalance#0"
      ],
      "stack_out": [
        "availableBalance#0",
        "0",
        "\"d\""
      ]
    },
    "610": {
      "op": "app_global_get_ex",
      "defined_out": [
        "availableBalance#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "availableBalance#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "611": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "availableBalance#0",
        "maybe_value%0#0"
      ]
    },
    "612": {
      "op": "global ZeroAddress",
      "defined_out": [
        "availableBalance#0",
        "maybe_value%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "availableBalance#0",
        "maybe_value%0#0",
        "tmp%2#0"
      ]
    },
    "614": {
      "op": "!=",
      "defined_out": [
        "availableBalance#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "availableBalance#0",
        "tmp%3#0"
      ]
    },
    "615": {
      "error": "No highest click holder found",
      "op": "assert // No highest click holder found",
      "stack_out": [
        "availableBalance#0"
      ]
    },
    "616": {
      "op": "itxn_begin"
    },
    "617": {
      "op": "intc_0 // 0",
      "stack_out": [
        "availableBalance#0",
        "0"
      ]
    },
    "618": {
      "op": "bytec_3 // \"d\"",
      "stack_out": [
        "availableBalance#0",
        "0",
        "\"d\""
      ]
    },
    "619": {
      "op": "app_global_get_ex",
      "defined_out": [
        "availableBalance#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "availableBalance#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "620": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "availableBalance#0",
        "maybe_value%1#0"
      ]
    },
    "621": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "availableBalance#0"
      ]
    },
    "623": {
      "op": "itxn_field Amount",
      "stack_out": []
    },
    "625": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "626": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "628": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "629": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "631": {
      "op": "itxn_submit"
    },
    "632": {
      "retsub": true,
      "op": "retsub"
    }
  }
}