#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1
    bytecblock "c" "a"
    // smart_contracts/click_cron/contract.algo.ts:32
    // export class ClickCron extends Contract {
    txn NumAppArgs
    bz main_bare_routing@10
    pushbytess 0xda53fefe 0x29314d95 0xe8a8c2c5 0xfd62c66d 0x9e20fc26 // method "createApplication(account)void", method "optIn()void", method "setCronAccount(account)void", method "recordClick()void", method "getClickCount(account)uint64"
    txna ApplicationArgs 0
    match main_createApplication_route@3 main_optIn_route@4 main_setCronAccount_route@5 main_recordClick_route@6 main_getClickCount_route@7

main_after_if_else@14:
    // smart_contracts/click_cron/contract.algo.ts:32
    // export class ClickCron extends Contract {
    intc_0 // 0
    return

main_getClickCount_route@7:
    // smart_contracts/click_cron/contract.algo.ts:70
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/click_cron/contract.algo.ts:32
    // export class ClickCron extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // smart_contracts/click_cron/contract.algo.ts:70
    // @abimethod()
    callsub getClickCount
    itob
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_recordClick_route@6:
    // smart_contracts/click_cron/contract.algo.ts:53
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub recordClick
    intc_1 // 1
    return

main_setCronAccount_route@5:
    // smart_contracts/click_cron/contract.algo.ts:47
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/click_cron/contract.algo.ts:32
    // export class ClickCron extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // smart_contracts/click_cron/contract.algo.ts:47
    // @abimethod()
    callsub setCronAccount
    intc_1 // 1
    return

main_optIn_route@4:
    // smart_contracts/click_cron/contract.algo.ts:42
    // @abimethod({ allowActions: 'OptIn' })
    txn OnCompletion
    intc_1 // OptIn
    ==
    assert // OnCompletion is not OptIn
    txn ApplicationID
    assert // can only call when not creating
    callsub optIn
    intc_1 // 1
    return

main_createApplication_route@3:
    // smart_contracts/click_cron/contract.algo.ts:37
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/click_cron/contract.algo.ts:32
    // export class ClickCron extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // smart_contracts/click_cron/contract.algo.ts:37
    // @abimethod()
    callsub createApplication
    intc_1 // 1
    return

main_bare_routing@10:
    // smart_contracts/click_cron/contract.algo.ts:32
    // export class ClickCron extends Contract {
    txn OnCompletion
    bnz main_after_if_else@14
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// smart_contracts/click_cron/contract.algo.ts::ClickCron.createApplication(admin: bytes) -> void:
createApplication:
    // smart_contracts/click_cron/contract.algo.ts:37-38
    // @abimethod()
    // public createApplication(admin: Account): void {
    proto 1 0
    // smart_contracts/click_cron/contract.algo.ts:33
    // admin = GlobalState<Account>({ key: 'a' });
    bytec_1 // "a"
    // smart_contracts/click_cron/contract.algo.ts:39
    // this.admin.value = admin;
    frame_dig -1
    app_global_put
    retsub


// smart_contracts/click_cron/contract.algo.ts::ClickCron.optIn() -> void:
optIn:
    // smart_contracts/click_cron/contract.algo.ts:44
    // this.clickCount(Txn.sender).value = Uint64(0);
    txn Sender
    // smart_contracts/click_cron/contract.algo.ts:35
    // clickCount = LocalState<uint64>({ key: 'c' });
    bytec_0 // "c"
    // smart_contracts/click_cron/contract.algo.ts:44
    // this.clickCount(Txn.sender).value = Uint64(0);
    intc_0 // 0
    app_local_put
    retsub


// smart_contracts/click_cron/contract.algo.ts::ClickCron.setCronAccount(account: bytes) -> void:
setCronAccount:
    // smart_contracts/click_cron/contract.algo.ts:47-48
    // @abimethod()
    // public setCronAccount(account: Account): void {
    proto 1 0
    // smart_contracts/click_cron/contract.algo.ts:49
    // assert(Txn.sender === this.admin.value, 'Only admin can set cron account');
    txn Sender
    // smart_contracts/click_cron/contract.algo.ts:33
    // admin = GlobalState<Account>({ key: 'a' });
    intc_0 // 0
    bytec_1 // "a"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/click_cron/contract.algo.ts:49
    // assert(Txn.sender === this.admin.value, 'Only admin can set cron account');
    ==
    assert // Only admin can set cron account
    // smart_contracts/click_cron/contract.algo.ts:34
    // cronAccount = GlobalState<Account>({ key: 'c' });
    bytec_0 // "c"
    // smart_contracts/click_cron/contract.algo.ts:50
    // this.cronAccount.value = account;
    frame_dig -1
    app_global_put
    retsub


// smart_contracts/click_cron/contract.algo.ts::ClickCron.recordClick() -> void:
recordClick:
    // smart_contracts/click_cron/contract.algo.ts:53-54
    // @abimethod()
    // public recordClick(): void {
    proto 0 0
    // smart_contracts/click_cron/contract.algo.ts:34
    // cronAccount = GlobalState<Account>({ key: 'c' });
    intc_0 // 0
    bytec_0 // "c"
    // smart_contracts/click_cron/contract.algo.ts:55
    // assert(this.cronAccount.hasValue, 'Cron account not set');
    app_global_get_ex
    bury 1
    assert // Cron account not set
    // smart_contracts/click_cron/contract.algo.ts:56
    // const currentCount = this.clickCount(Txn.sender).value || Uint64(0);
    txn Sender
    intc_0 // 0
    // smart_contracts/click_cron/contract.algo.ts:35
    // clickCount = LocalState<uint64>({ key: 'c' });
    bytec_0 // "c"
    // smart_contracts/click_cron/contract.algo.ts:56
    // const currentCount = this.clickCount(Txn.sender).value || Uint64(0);
    app_local_get_ex
    swap
    dup
    uncover 2
    assert // check LocalState exists
    bz recordClick_ternary_false@2
    frame_dig 0

recordClick_ternary_merge@3:
    // smart_contracts/click_cron/contract.algo.ts:57
    // this.clickCount(Txn.sender).value = currentCount + Uint64(1);
    txn Sender
    swap
    intc_1 // 1
    +
    // smart_contracts/click_cron/contract.algo.ts:35
    // clickCount = LocalState<uint64>({ key: 'c' });
    bytec_0 // "c"
    // smart_contracts/click_cron/contract.algo.ts:57
    // this.clickCount(Txn.sender).value = currentCount + Uint64(1);
    swap
    app_local_put
    // smart_contracts/click_cron/contract.algo.ts:60-67
    // itxn
    //   .payment({
    //     sender: this.cronAccount.value, // Transaction comes from the cron account
    //     receiver: this.cronAccount.value, // Dummy transaction to itself for now
    //     amount: 0,
    //     fee: 0, // Bob's outer transaction covers fees
    //   })
    //   .submit();
    itxn_begin
    // smart_contracts/click_cron/contract.algo.ts:34
    // cronAccount = GlobalState<Account>({ key: 'c' });
    intc_0 // 0
    bytec_0 // "c"
    app_global_get_ex
    assert // check GlobalState exists
    intc_0 // 0
    bytec_0 // "c"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/click_cron/contract.algo.ts:64
    // amount: 0,
    intc_0 // 0
    itxn_field Amount
    itxn_field Receiver
    itxn_field Sender
    // smart_contracts/click_cron/contract.algo.ts:60-66
    // itxn
    //   .payment({
    //     sender: this.cronAccount.value, // Transaction comes from the cron account
    //     receiver: this.cronAccount.value, // Dummy transaction to itself for now
    //     amount: 0,
    //     fee: 0, // Bob's outer transaction covers fees
    //   })
    intc_1 // 1
    itxn_field TypeEnum
    // smart_contracts/click_cron/contract.algo.ts:65
    // fee: 0, // Bob's outer transaction covers fees
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/click_cron/contract.algo.ts:60-67
    // itxn
    //   .payment({
    //     sender: this.cronAccount.value, // Transaction comes from the cron account
    //     receiver: this.cronAccount.value, // Dummy transaction to itself for now
    //     amount: 0,
    //     fee: 0, // Bob's outer transaction covers fees
    //   })
    //   .submit();
    itxn_submit
    retsub

recordClick_ternary_false@2:
    // smart_contracts/click_cron/contract.algo.ts:56
    // const currentCount = this.clickCount(Txn.sender).value || Uint64(0);
    intc_0 // 0
    b recordClick_ternary_merge@3


// smart_contracts/click_cron/contract.algo.ts::ClickCron.getClickCount(user: bytes) -> uint64:
getClickCount:
    // smart_contracts/click_cron/contract.algo.ts:70-71
    // @abimethod()
    // public getClickCount(user: Account): uint64 {
    proto 1 1
    // smart_contracts/click_cron/contract.algo.ts:72
    // return this.clickCount(user).value || Uint64(0);
    frame_dig -1
    intc_0 // 0
    // smart_contracts/click_cron/contract.algo.ts:35
    // clickCount = LocalState<uint64>({ key: 'c' });
    bytec_0 // "c"
    // smart_contracts/click_cron/contract.algo.ts:72
    // return this.clickCount(user).value || Uint64(0);
    app_local_get_ex
    swap
    dup
    uncover 2
    assert // check LocalState exists
    bz getClickCount_ternary_false@2
    frame_dig 0

getClickCount_ternary_merge@3:
    // smart_contracts/click_cron/contract.algo.ts:72
    // return this.clickCount(user).value || Uint64(0);
    swap
    retsub

getClickCount_ternary_false@2:
    // smart_contracts/click_cron/contract.algo.ts:72
    // return this.clickCount(user).value || Uint64(0);
    intc_0 // 0
    b getClickCount_ternary_merge@3
