/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"ClickCron","structs":{},"methods":[{"name":"createApplication","args":[{"type":"account","name":"admin"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"optIn","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["OptIn"]},"readonly":false,"events":[],"recommendations":{}},{"name":"setCronAccount","args":[{"type":"account","name":"account"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"recordClick","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getClickCount","args":[{"type":"account","name":"user"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":0,"bytes":2},"local":{"ints":1,"bytes":0}},"keys":{"global":{"admin":{"keyType":"AVMString","valueType":"AVMBytes","key":"YQ=="},"cronAccount":{"keyType":"AVMString","valueType":"AVMBytes","key":"Yw=="}},"local":{"clickCount":{"keyType":"AVMString","valueType":"AVMUint64","key":"Yw=="}},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[198],"errorMessage":"Cron account not set"},{"pc":[63,91,103,134],"errorMessage":"OnCompletion is not NoOp"},{"pc":[122],"errorMessage":"OnCompletion is not OptIn"},{"pc":[184],"errorMessage":"Only admin can set cron account"},{"pc":[157],"errorMessage":"can only call when creating"},{"pc":[66,94,106,125,137],"errorMessage":"can only call when not creating"},{"pc":[182,226,230],"errorMessage":"check GlobalState exists"},{"pc":[208,262],"errorMessage":"check LocalState exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiACAAEmAgFjAWExG0EAhYIFBNpT/v4EKTFNlQToqMLFBP1ixm0EniD8JjYaAI4FAEkAPAAqAB4AAiJDMRkURDEYRDYaARfAHIgArhaABBUffHVMULAjQzEZFEQxGESIAFwjQzEZFEQxGEQ2GgEXwByIADojQzEZIxJEMRhEiAAnI0MxGRREMRhENhoBF8AciAANI0MxGUD/oDEYFEQjQ4oBACmL/2eJMQAoImaJigEAMQAiKWVEEkQoi/9niYoAACIoZUUBRDEAIihjTElPAkRBACKLADEATCMIKExmsSIoZUQiKGVEIrIIsgeyACOyECKyAbOJIkL/3IoBAYv/IihjTElPAkRBAASLAEyJIkL/+g==","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":5,"patch":3}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the ClickCron contract
 */
export type ClickCronArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(account)void': {
      admin: Uint8Array | string
    }
    'optIn()void': Record<string, never>
    'setCronAccount(account)void': {
      account: Uint8Array | string
    }
    'recordClick()void': Record<string, never>
    'getClickCount(account)uint64': {
      user: Uint8Array | string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(account)void': [admin: Uint8Array | string]
    'optIn()void': []
    'setCronAccount(account)void': [account: Uint8Array | string]
    'recordClick()void': []
    'getClickCount(account)uint64': [user: Uint8Array | string]
  }
}

/**
 * The return type for each method
 */
export type ClickCronReturns = {
  'createApplication(account)void': void
  'optIn()void': void
  'setCronAccount(account)void': void
  'recordClick()void': void
  'getClickCount(account)uint64': bigint
}

/**
 * Defines the types of available calls and state of the ClickCron smart contract.
 */
export type ClickCronTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(account)void' | 'createApplication', {
      argsObj: ClickCronArgs['obj']['createApplication(account)void']
      argsTuple: ClickCronArgs['tuple']['createApplication(account)void']
      returns: ClickCronReturns['createApplication(account)void']
    }>
    & Record<'optIn()void' | 'optIn', {
      argsObj: ClickCronArgs['obj']['optIn()void']
      argsTuple: ClickCronArgs['tuple']['optIn()void']
      returns: ClickCronReturns['optIn()void']
    }>
    & Record<'setCronAccount(account)void' | 'setCronAccount', {
      argsObj: ClickCronArgs['obj']['setCronAccount(account)void']
      argsTuple: ClickCronArgs['tuple']['setCronAccount(account)void']
      returns: ClickCronReturns['setCronAccount(account)void']
    }>
    & Record<'recordClick()void' | 'recordClick', {
      argsObj: ClickCronArgs['obj']['recordClick()void']
      argsTuple: ClickCronArgs['tuple']['recordClick()void']
      returns: ClickCronReturns['recordClick()void']
    }>
    & Record<'getClickCount(account)uint64' | 'getClickCount', {
      argsObj: ClickCronArgs['obj']['getClickCount(account)uint64']
      argsTuple: ClickCronArgs['tuple']['getClickCount(account)uint64']
      returns: ClickCronReturns['getClickCount(account)uint64']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        admin: BinaryState
        cronAccount: BinaryState
      }
      maps: {}
    }
    local: {
      keys: {
        clickCount: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type ClickCronSignatures = keyof ClickCronTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type ClickCronNonVoidMethodSignatures = keyof ClickCronTypes['methods'] extends infer T ? T extends keyof ClickCronTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the ClickCron smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends ClickCronSignatures> = ClickCronTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the ClickCron smart contract to the method's return type
 */
export type MethodReturn<TSignature extends ClickCronSignatures> = ClickCronTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = ClickCronTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed local state of the application.
 */
export type LocalKeysState = ClickCronTypes['state']['local']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type ClickCronCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type ClickCronDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: ClickCronCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the ClickCron smart contract
 */
export abstract class ClickCronParamsFactory {
  /**
   * Gets available optIn ABI call param factories
   */
  static get optIn() {
    return {
      /**
       * Constructs opt-in ABI call params for the ClickCron smart contract using the optIn()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      optIn(params: CallParams<ClickCronArgs['obj']['optIn()void'] | ClickCronArgs['tuple']['optIn()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'optIn()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the createApplication(account)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createApplication(params: CallParams<ClickCronArgs['obj']['createApplication(account)void'] | ClickCronArgs['tuple']['createApplication(account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createApplication(account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.admin],
    }
  }
  /**
   * Constructs a no op call for the setCronAccount(account)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setCronAccount(params: CallParams<ClickCronArgs['obj']['setCronAccount(account)void'] | ClickCronArgs['tuple']['setCronAccount(account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setCronAccount(account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.account],
    }
  }
  /**
   * Constructs a no op call for the recordClick()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static recordClick(params: CallParams<ClickCronArgs['obj']['recordClick()void'] | ClickCronArgs['tuple']['recordClick()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'recordClick()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getClickCount(account)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getClickCount(params: CallParams<ClickCronArgs['obj']['getClickCount(account)uint64'] | ClickCronArgs['tuple']['getClickCount(account)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getClickCount(account)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.user],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the ClickCron smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class ClickCronFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `ClickCronFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new ClickCronClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new ClickCronClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the ClickCron smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: ClickCronDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new ClickCronClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ClickCron smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ClickCron smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ClickCron smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new ClickCronClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the ClickCron smart contract
 */
export class ClickCronClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `ClickCronClient`
   *
   * @param appClient An `AppClient` instance which has been created with the ClickCron app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `ClickCronClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends ClickCronNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `ClickCronClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<ClickCronClient> {
    return new ClickCronClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `ClickCronClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<ClickCronClient> {
    return new ClickCronClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the ClickCron smart contract using the `optIn()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The optIn params
       */
      optIn: (params: CallParams<ClickCronArgs['obj']['optIn()void'] | ClickCronArgs['tuple']['optIn()void']> = {args: []}) => {
        return this.appClient.params.optIn(ClickCronParamsFactory.optIn.optIn(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the ClickCron smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the ClickCron smart contract using the `createApplication(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createApplication: (params: CallParams<ClickCronArgs['obj']['createApplication(account)void'] | ClickCronArgs['tuple']['createApplication(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ClickCronParamsFactory.createApplication(params))
    },

    /**
     * Makes a call to the ClickCron smart contract using the `setCronAccount(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setCronAccount: (params: CallParams<ClickCronArgs['obj']['setCronAccount(account)void'] | ClickCronArgs['tuple']['setCronAccount(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ClickCronParamsFactory.setCronAccount(params))
    },

    /**
     * Makes a call to the ClickCron smart contract using the `recordClick()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    recordClick: (params: CallParams<ClickCronArgs['obj']['recordClick()void'] | ClickCronArgs['tuple']['recordClick()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(ClickCronParamsFactory.recordClick(params))
    },

    /**
     * Makes a call to the ClickCron smart contract using the `getClickCount(account)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getClickCount: (params: CallParams<ClickCronArgs['obj']['getClickCount(account)uint64'] | ClickCronArgs['tuple']['getClickCount(account)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ClickCronParamsFactory.getClickCount(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the ClickCron smart contract using the `optIn()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The optIn transaction
       */
      optIn: (params: CallParams<ClickCronArgs['obj']['optIn()void'] | ClickCronArgs['tuple']['optIn()void']> = {args: []}) => {
        return this.appClient.createTransaction.optIn(ClickCronParamsFactory.optIn.optIn(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the ClickCron smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the ClickCron smart contract using the `createApplication(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createApplication: (params: CallParams<ClickCronArgs['obj']['createApplication(account)void'] | ClickCronArgs['tuple']['createApplication(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ClickCronParamsFactory.createApplication(params))
    },

    /**
     * Makes a call to the ClickCron smart contract using the `setCronAccount(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setCronAccount: (params: CallParams<ClickCronArgs['obj']['setCronAccount(account)void'] | ClickCronArgs['tuple']['setCronAccount(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ClickCronParamsFactory.setCronAccount(params))
    },

    /**
     * Makes a call to the ClickCron smart contract using the `recordClick()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    recordClick: (params: CallParams<ClickCronArgs['obj']['recordClick()void'] | ClickCronArgs['tuple']['recordClick()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(ClickCronParamsFactory.recordClick(params))
    },

    /**
     * Makes a call to the ClickCron smart contract using the `getClickCount(account)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getClickCount: (params: CallParams<ClickCronArgs['obj']['getClickCount(account)uint64'] | ClickCronArgs['tuple']['getClickCount(account)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ClickCronParamsFactory.getClickCount(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the ClickCron smart contract using the `optIn()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The optIn result
       */
      optIn: async (params: CallParams<ClickCronArgs['obj']['optIn()void'] | ClickCronArgs['tuple']['optIn()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.optIn(ClickCronParamsFactory.optIn.optIn(params))
        return {...result, return: result.return as unknown as (undefined | ClickCronReturns['optIn()void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the ClickCron smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the ClickCron smart contract using the `createApplication(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createApplication: async (params: CallParams<ClickCronArgs['obj']['createApplication(account)void'] | ClickCronArgs['tuple']['createApplication(account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ClickCronParamsFactory.createApplication(params))
      return {...result, return: result.return as unknown as (undefined | ClickCronReturns['createApplication(account)void'])}
    },

    /**
     * Makes a call to the ClickCron smart contract using the `setCronAccount(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setCronAccount: async (params: CallParams<ClickCronArgs['obj']['setCronAccount(account)void'] | ClickCronArgs['tuple']['setCronAccount(account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ClickCronParamsFactory.setCronAccount(params))
      return {...result, return: result.return as unknown as (undefined | ClickCronReturns['setCronAccount(account)void'])}
    },

    /**
     * Makes a call to the ClickCron smart contract using the `recordClick()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    recordClick: async (params: CallParams<ClickCronArgs['obj']['recordClick()void'] | ClickCronArgs['tuple']['recordClick()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(ClickCronParamsFactory.recordClick(params))
      return {...result, return: result.return as unknown as (undefined | ClickCronReturns['recordClick()void'])}
    },

    /**
     * Makes a call to the ClickCron smart contract using the `getClickCount(account)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getClickCount: async (params: CallParams<ClickCronArgs['obj']['getClickCount(account)uint64'] | ClickCronArgs['tuple']['getClickCount(account)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ClickCronParamsFactory.getClickCount(params))
      return {...result, return: result.return as unknown as (undefined | ClickCronReturns['getClickCount(account)uint64'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new ClickCronClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current ClickCron app
   */
  state = {
    /**
     * Methods to access global state for the current ClickCron app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          admin: new BinaryStateValue(result.admin),
          cronAccount: new BinaryStateValue(result.cronAccount),
        }
      },
      /**
       * Get the current value of the admin key in global state
       */
      admin: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("admin")) as Uint8Array | undefined) },
      /**
       * Get the current value of the cronAccount key in global state
       */
      cronAccount: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("cronAccount")) as Uint8Array | undefined) },
    },
    /**
     * Methods to access local state for the current ClickCron app
     */
    local: (address: string | Address) => {
      const encodedAddress = typeof address === 'string' ? address : encodeAddress(address.publicKey)
      return {
        /**
         * Get all current keyed values from local state
         */
        getAll: async (): Promise<Partial<Expand<LocalKeysState>>> => {
          const result = await this.appClient.state.local(encodedAddress).getAll()
          return {
            clickCount: result.clickCount,
          }
        },
        /**
         * Get the current value of the clickCount key in local state
         */
        clickCount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("clickCount")) as bigint | undefined },
      }
    },
  }

  public newGroup(): ClickCronComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a createApplication(account)void method call against the ClickCron contract
       */
      createApplication(params: CallParams<ClickCronArgs['obj']['createApplication(account)void'] | ClickCronArgs['tuple']['createApplication(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createApplication(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a setCronAccount(account)void method call against the ClickCron contract
       */
      setCronAccount(params: CallParams<ClickCronArgs['obj']['setCronAccount(account)void'] | ClickCronArgs['tuple']['setCronAccount(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setCronAccount(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a recordClick()void method call against the ClickCron contract
       */
      recordClick(params: CallParams<ClickCronArgs['obj']['recordClick()void'] | ClickCronArgs['tuple']['recordClick()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.recordClick(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getClickCount(account)uint64 method call against the ClickCron contract
       */
      getClickCount(params: CallParams<ClickCronArgs['obj']['getClickCount(account)uint64'] | ClickCronArgs['tuple']['getClickCount(account)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getClickCount(params)))
        resultMappers.push((v) => client.decodeReturnValue('getClickCount(account)uint64', v))
        return this
      },
      get optIn() {
        return {
          optIn: (params: CallParams<ClickCronArgs['obj']['optIn()void'] | ClickCronArgs['tuple']['optIn()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optIn.optIn(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the ClickCron contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as ClickCronComposer
  }
}
export type ClickCronComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createApplication(account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createApplication(params?: CallParams<ClickCronArgs['obj']['createApplication(account)void'] | ClickCronArgs['tuple']['createApplication(account)void']>): ClickCronComposer<[...TReturns, ClickCronReturns['createApplication(account)void'] | undefined]>

  /**
   * Calls the setCronAccount(account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setCronAccount(params?: CallParams<ClickCronArgs['obj']['setCronAccount(account)void'] | ClickCronArgs['tuple']['setCronAccount(account)void']>): ClickCronComposer<[...TReturns, ClickCronReturns['setCronAccount(account)void'] | undefined]>

  /**
   * Calls the recordClick()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  recordClick(params?: CallParams<ClickCronArgs['obj']['recordClick()void'] | ClickCronArgs['tuple']['recordClick()void']>): ClickCronComposer<[...TReturns, ClickCronReturns['recordClick()void'] | undefined]>

  /**
   * Calls the getClickCount(account)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getClickCount(params?: CallParams<ClickCronArgs['obj']['getClickCount(account)uint64'] | ClickCronArgs['tuple']['getClickCount(account)uint64']>): ClickCronComposer<[...TReturns, ClickCronReturns['getClickCount(account)uint64'] | undefined]>

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the ClickCron smart contract using the optIn()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    optIn(params?: CallParams<ClickCronArgs['obj']['optIn()void'] | ClickCronArgs['tuple']['optIn()void']>): ClickCronComposer<[...TReturns, ClickCronReturns['optIn()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the ClickCron smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): ClickCronComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): ClickCronComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<ClickCronComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<ClickCronComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<ClickCronComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<ClickCronComposerResults<TReturns>>
}
export type ClickCronComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

