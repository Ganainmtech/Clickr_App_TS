/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"clickrLogic","structs":{},"methods":[{"name":"createApplication","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"events":[],"recommendations":{}},{"name":"optIn","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["OptIn"]},"readonly":false,"events":[],"recommendations":{}},{"name":"recordClick","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getClickCount","args":[{"type":"account","name":"user"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getHighestClickCount","args":[{"type":"account","name":"user"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getHeartCount","args":[{"type":"account","name":"user"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getUserAllTimeClickCount","args":[{"type":"account","name":"user"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"clickProcessed","args":[{"type":"account","name":"user"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"decrementHeart","args":[{"type":"account","name":"user"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"distributeRewards","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Distributes the contract's balance to the user with the highest global click count.\nThe fee is set to 0 so the sender of the app call covers the transaction fee.\nThe sender of the payment is the smart contract's own balance.","events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":2,"bytes":1},"local":{"ints":4,"bytes":0}},"keys":{"global":{"highestClickCount":{"keyType":"AVMString","valueType":"AVMUint64","key":"Zw=="},"highestClickCountAddress":{"keyType":"AVMString","valueType":"AVMBytes","key":"ZA=="},"lastRewardTime":{"keyType":"AVMString","valueType":"AVMUint64","key":"ZQ=="}},"local":{"userClickCount":{"keyType":"AVMString","valueType":"AVMUint64","key":"YQ=="},"userHeartCount":{"keyType":"AVMString","valueType":"AVMUint64","key":"Yg=="},"userHighestClickCount":{"keyType":"AVMString","valueType":"AVMUint64","key":"Yw=="},"useAllTimeClickCount":{"keyType":"AVMString","valueType":"AVMUint64","key":"bA=="}},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[563],"errorMessage":"No available balance to send"},{"pc":[571],"errorMessage":"No highest click holder found"},{"pc":[111,123,141,159,182,205,228,251,276],"errorMessage":"OnCompletion is not NoOp"},{"pc":[264],"errorMessage":"OnCompletion is not OptIn"},{"pc":[340],"errorMessage":"Only if user hearts are above 0 record click"},{"pc":[334],"errorMessage":"Only the user can record a click"},{"pc":[538],"errorMessage":"To decrement hearts there has to be atleast 1"},{"pc":[558],"errorMessage":"account funded"},{"pc":[280],"errorMessage":"can only call when creating"},{"pc":[114,126,144,162,185,208,231,254,267],"errorMessage":"can only call when not creating"},{"pc":[507,567,576],"errorMessage":"check GlobalState exists"},{"pc":[339,348,386,411,435,460,484,491,537,544],"errorMessage":"check LocalState exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiACAAEmBwFhAWIEFR98dQFkAWMBZwFsMRtBAE2CCgS4RHs2BCkxTZUE/WLGbQSeIPwmBCFmfoYE+69njwQkIdnDBFkzONoEWfvazgSwqTgHNhoAjgoApwCaAI4AdwBgAEkAMgAgAA4AAiJDMRkURDEYRIgBtCNDMRkURDEYRDYaARfAHIgBiSNDMRkURDEYRDYaARfAHIgBPiNDMRkURDEYRDYaARfAHIgBExYqTFCwI0MxGRREMRhENhoBF8AciADkFipMULAjQzEZFEQxGEQ2GgEXwByIALQWKkxQsCNDMRkURDEYRDYaARfAHIgAhRYqTFCwI0MxGRREMRhEiABCI0MxGSMSRDEYRIgAHSNDMRkURDEYFESIAAIjQycFImcrMglngAFlImeJMQAoImYxACmBBWYxACcEImYxACcGImaJigAAMQBHAksBEkRJIiljREQiKGNMSU8CREEAEosBIwiLAElOAihLAmYnBkxmiSJC/+yKAQGL/yIoY0xJTwJEQQAEiwBMiSJC//qKAQGL/yInBGNMSU8CREEABIsATIkiQv/6igEBi/8iKWNMSU8CREEABIsATIkiQv/6igEBi/8iJwZjTElPAkRBAASLAEyJIkL/+ooBAIv/IihjTElPAkSL/yInBGNEDUEAB4v/JwSLAGYiJwVlRIsADEEACScFiwBnK4v/Z4v/KCJmiYoBAIv/IiljRESL/yIpY0QjCYv/KU8CZokyCnMARDIBCUlEIitlRDIDE0SxIitlRLIHsggjshAisgGziQ==","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":5,"patch":3}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the ClickrLogic contract
 */
export type ClickrLogicArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'optIn()void': Record<string, never>
    'recordClick()void': Record<string, never>
    'getClickCount(account)uint64': {
      user: Uint8Array | string
    }
    'getHighestClickCount(account)uint64': {
      user: Uint8Array | string
    }
    'getHeartCount(account)uint64': {
      user: Uint8Array | string
    }
    'getUserAllTimeClickCount(account)uint64': {
      user: Uint8Array | string
    }
    'clickProcessed(account)void': {
      user: Uint8Array | string
    }
    'decrementHeart(account)void': {
      user: Uint8Array | string
    }
    'distributeRewards()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'optIn()void': []
    'recordClick()void': []
    'getClickCount(account)uint64': [user: Uint8Array | string]
    'getHighestClickCount(account)uint64': [user: Uint8Array | string]
    'getHeartCount(account)uint64': [user: Uint8Array | string]
    'getUserAllTimeClickCount(account)uint64': [user: Uint8Array | string]
    'clickProcessed(account)void': [user: Uint8Array | string]
    'decrementHeart(account)void': [user: Uint8Array | string]
    'distributeRewards()void': []
  }
}

/**
 * The return type for each method
 */
export type ClickrLogicReturns = {
  'createApplication()void': void
  'optIn()void': void
  'recordClick()void': void
  'getClickCount(account)uint64': bigint
  'getHighestClickCount(account)uint64': bigint
  'getHeartCount(account)uint64': bigint
  'getUserAllTimeClickCount(account)uint64': bigint
  'clickProcessed(account)void': void
  'decrementHeart(account)void': void
  'distributeRewards()void': void
}

/**
 * Defines the types of available calls and state of the ClickrLogic smart contract.
 */
export type ClickrLogicTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: ClickrLogicArgs['obj']['createApplication()void']
      argsTuple: ClickrLogicArgs['tuple']['createApplication()void']
      returns: ClickrLogicReturns['createApplication()void']
    }>
    & Record<'optIn()void' | 'optIn', {
      argsObj: ClickrLogicArgs['obj']['optIn()void']
      argsTuple: ClickrLogicArgs['tuple']['optIn()void']
      returns: ClickrLogicReturns['optIn()void']
    }>
    & Record<'recordClick()void' | 'recordClick', {
      argsObj: ClickrLogicArgs['obj']['recordClick()void']
      argsTuple: ClickrLogicArgs['tuple']['recordClick()void']
      returns: ClickrLogicReturns['recordClick()void']
    }>
    & Record<'getClickCount(account)uint64' | 'getClickCount', {
      argsObj: ClickrLogicArgs['obj']['getClickCount(account)uint64']
      argsTuple: ClickrLogicArgs['tuple']['getClickCount(account)uint64']
      returns: ClickrLogicReturns['getClickCount(account)uint64']
    }>
    & Record<'getHighestClickCount(account)uint64' | 'getHighestClickCount', {
      argsObj: ClickrLogicArgs['obj']['getHighestClickCount(account)uint64']
      argsTuple: ClickrLogicArgs['tuple']['getHighestClickCount(account)uint64']
      returns: ClickrLogicReturns['getHighestClickCount(account)uint64']
    }>
    & Record<'getHeartCount(account)uint64' | 'getHeartCount', {
      argsObj: ClickrLogicArgs['obj']['getHeartCount(account)uint64']
      argsTuple: ClickrLogicArgs['tuple']['getHeartCount(account)uint64']
      returns: ClickrLogicReturns['getHeartCount(account)uint64']
    }>
    & Record<'getUserAllTimeClickCount(account)uint64' | 'getUserAllTimeClickCount', {
      argsObj: ClickrLogicArgs['obj']['getUserAllTimeClickCount(account)uint64']
      argsTuple: ClickrLogicArgs['tuple']['getUserAllTimeClickCount(account)uint64']
      returns: ClickrLogicReturns['getUserAllTimeClickCount(account)uint64']
    }>
    & Record<'clickProcessed(account)void' | 'clickProcessed', {
      argsObj: ClickrLogicArgs['obj']['clickProcessed(account)void']
      argsTuple: ClickrLogicArgs['tuple']['clickProcessed(account)void']
      returns: ClickrLogicReturns['clickProcessed(account)void']
    }>
    & Record<'decrementHeart(account)void' | 'decrementHeart', {
      argsObj: ClickrLogicArgs['obj']['decrementHeart(account)void']
      argsTuple: ClickrLogicArgs['tuple']['decrementHeart(account)void']
      returns: ClickrLogicReturns['decrementHeart(account)void']
    }>
    & Record<'distributeRewards()void' | 'distributeRewards', {
      argsObj: ClickrLogicArgs['obj']['distributeRewards()void']
      argsTuple: ClickrLogicArgs['tuple']['distributeRewards()void']
      returns: ClickrLogicReturns['distributeRewards()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        highestClickCount: bigint
        highestClickCountAddress: BinaryState
        lastRewardTime: bigint
      }
      maps: {}
    }
    local: {
      keys: {
        userClickCount: bigint
        userHeartCount: bigint
        userHighestClickCount: bigint
        useAllTimeClickCount: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type ClickrLogicSignatures = keyof ClickrLogicTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type ClickrLogicNonVoidMethodSignatures = keyof ClickrLogicTypes['methods'] extends infer T ? T extends keyof ClickrLogicTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the ClickrLogic smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends ClickrLogicSignatures> = ClickrLogicTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the ClickrLogic smart contract to the method's return type
 */
export type MethodReturn<TSignature extends ClickrLogicSignatures> = ClickrLogicTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = ClickrLogicTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed local state of the application.
 */
export type LocalKeysState = ClickrLogicTypes['state']['local']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type ClickrLogicCreateCallParams =
  | Expand<CallParams<ClickrLogicArgs['obj']['createApplication()void'] | ClickrLogicArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<ClickrLogicArgs['obj']['createApplication()void'] | ClickrLogicArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type ClickrLogicDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: ClickrLogicCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the ClickrLogic smart contract
 */
export abstract class ClickrLogicParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends ClickrLogicCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return ClickrLogicParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the clickrLogic smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<ClickrLogicArgs['obj']['createApplication()void'] | ClickrLogicArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Gets available optIn ABI call param factories
   */
  static get optIn() {
    return {
      /**
       * Constructs opt-in ABI call params for the clickrLogic smart contract using the optIn()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      optIn(params: CallParams<ClickrLogicArgs['obj']['optIn()void'] | ClickrLogicArgs['tuple']['optIn()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'optIn()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the recordClick()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static recordClick(params: CallParams<ClickrLogicArgs['obj']['recordClick()void'] | ClickrLogicArgs['tuple']['recordClick()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'recordClick()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getClickCount(account)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getClickCount(params: CallParams<ClickrLogicArgs['obj']['getClickCount(account)uint64'] | ClickrLogicArgs['tuple']['getClickCount(account)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getClickCount(account)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.user],
    }
  }
  /**
   * Constructs a no op call for the getHighestClickCount(account)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getHighestClickCount(params: CallParams<ClickrLogicArgs['obj']['getHighestClickCount(account)uint64'] | ClickrLogicArgs['tuple']['getHighestClickCount(account)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getHighestClickCount(account)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.user],
    }
  }
  /**
   * Constructs a no op call for the getHeartCount(account)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getHeartCount(params: CallParams<ClickrLogicArgs['obj']['getHeartCount(account)uint64'] | ClickrLogicArgs['tuple']['getHeartCount(account)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getHeartCount(account)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.user],
    }
  }
  /**
   * Constructs a no op call for the getUserAllTimeClickCount(account)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getUserAllTimeClickCount(params: CallParams<ClickrLogicArgs['obj']['getUserAllTimeClickCount(account)uint64'] | ClickrLogicArgs['tuple']['getUserAllTimeClickCount(account)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getUserAllTimeClickCount(account)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.user],
    }
  }
  /**
   * Constructs a no op call for the clickProcessed(account)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static clickProcessed(params: CallParams<ClickrLogicArgs['obj']['clickProcessed(account)void'] | ClickrLogicArgs['tuple']['clickProcessed(account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'clickProcessed(account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.user],
    }
  }
  /**
   * Constructs a no op call for the decrementHeart(account)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static decrementHeart(params: CallParams<ClickrLogicArgs['obj']['decrementHeart(account)void'] | ClickrLogicArgs['tuple']['decrementHeart(account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'decrementHeart(account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.user],
    }
  }
  /**
   * Constructs a no op call for the distributeRewards()void ABI method
   *
  * Distributes the contract's balance to the user with the highest global click count.
  The fee is set to 0 so the sender of the app call covers the transaction fee.
  The sender of the payment is the smart contract's own balance.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static distributeRewards(params: CallParams<ClickrLogicArgs['obj']['distributeRewards()void'] | ClickrLogicArgs['tuple']['distributeRewards()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'distributeRewards()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the clickrLogic smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class ClickrLogicFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `ClickrLogicFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new ClickrLogicClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new ClickrLogicClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the clickrLogic smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: ClickrLogicDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? ClickrLogicParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (ClickrLogicCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new ClickrLogicClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the clickrLogic smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<ClickrLogicArgs['obj']['createApplication()void'] | ClickrLogicArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(ClickrLogicParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the clickrLogic smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<ClickrLogicArgs['obj']['createApplication()void'] | ClickrLogicArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(ClickrLogicParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the clickrLogic smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<ClickrLogicArgs['obj']['createApplication()void'] | ClickrLogicArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(ClickrLogicParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | ClickrLogicReturns['createApplication()void']) }, appClient: new ClickrLogicClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the clickrLogic smart contract
 */
export class ClickrLogicClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `ClickrLogicClient`
   *
   * @param appClient An `AppClient` instance which has been created with the ClickrLogic app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `ClickrLogicClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends ClickrLogicNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `ClickrLogicClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<ClickrLogicClient> {
    return new ClickrLogicClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `ClickrLogicClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<ClickrLogicClient> {
    return new ClickrLogicClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the clickrLogic smart contract using the `optIn()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The optIn params
       */
      optIn: (params: CallParams<ClickrLogicArgs['obj']['optIn()void'] | ClickrLogicArgs['tuple']['optIn()void']> = {args: []}) => {
        return this.appClient.params.optIn(ClickrLogicParamsFactory.optIn.optIn(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the clickrLogic smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the clickrLogic smart contract using the `recordClick()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    recordClick: (params: CallParams<ClickrLogicArgs['obj']['recordClick()void'] | ClickrLogicArgs['tuple']['recordClick()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(ClickrLogicParamsFactory.recordClick(params))
    },

    /**
     * Makes a call to the clickrLogic smart contract using the `getClickCount(account)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getClickCount: (params: CallParams<ClickrLogicArgs['obj']['getClickCount(account)uint64'] | ClickrLogicArgs['tuple']['getClickCount(account)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ClickrLogicParamsFactory.getClickCount(params))
    },

    /**
     * Makes a call to the clickrLogic smart contract using the `getHighestClickCount(account)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getHighestClickCount: (params: CallParams<ClickrLogicArgs['obj']['getHighestClickCount(account)uint64'] | ClickrLogicArgs['tuple']['getHighestClickCount(account)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ClickrLogicParamsFactory.getHighestClickCount(params))
    },

    /**
     * Makes a call to the clickrLogic smart contract using the `getHeartCount(account)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getHeartCount: (params: CallParams<ClickrLogicArgs['obj']['getHeartCount(account)uint64'] | ClickrLogicArgs['tuple']['getHeartCount(account)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ClickrLogicParamsFactory.getHeartCount(params))
    },

    /**
     * Makes a call to the clickrLogic smart contract using the `getUserAllTimeClickCount(account)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getUserAllTimeClickCount: (params: CallParams<ClickrLogicArgs['obj']['getUserAllTimeClickCount(account)uint64'] | ClickrLogicArgs['tuple']['getUserAllTimeClickCount(account)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ClickrLogicParamsFactory.getUserAllTimeClickCount(params))
    },

    /**
     * Makes a call to the clickrLogic smart contract using the `clickProcessed(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    clickProcessed: (params: CallParams<ClickrLogicArgs['obj']['clickProcessed(account)void'] | ClickrLogicArgs['tuple']['clickProcessed(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ClickrLogicParamsFactory.clickProcessed(params))
    },

    /**
     * Makes a call to the clickrLogic smart contract using the `decrementHeart(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    decrementHeart: (params: CallParams<ClickrLogicArgs['obj']['decrementHeart(account)void'] | ClickrLogicArgs['tuple']['decrementHeart(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ClickrLogicParamsFactory.decrementHeart(params))
    },

    /**
     * Makes a call to the clickrLogic smart contract using the `distributeRewards()void` ABI method.
     *
    * Distributes the contract's balance to the user with the highest global click count.
    The fee is set to 0 so the sender of the app call covers the transaction fee.
    The sender of the payment is the smart contract's own balance.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    distributeRewards: (params: CallParams<ClickrLogicArgs['obj']['distributeRewards()void'] | ClickrLogicArgs['tuple']['distributeRewards()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(ClickrLogicParamsFactory.distributeRewards(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the clickrLogic smart contract using the `optIn()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The optIn transaction
       */
      optIn: (params: CallParams<ClickrLogicArgs['obj']['optIn()void'] | ClickrLogicArgs['tuple']['optIn()void']> = {args: []}) => {
        return this.appClient.createTransaction.optIn(ClickrLogicParamsFactory.optIn.optIn(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the clickrLogic smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the clickrLogic smart contract using the `recordClick()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    recordClick: (params: CallParams<ClickrLogicArgs['obj']['recordClick()void'] | ClickrLogicArgs['tuple']['recordClick()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(ClickrLogicParamsFactory.recordClick(params))
    },

    /**
     * Makes a call to the clickrLogic smart contract using the `getClickCount(account)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getClickCount: (params: CallParams<ClickrLogicArgs['obj']['getClickCount(account)uint64'] | ClickrLogicArgs['tuple']['getClickCount(account)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ClickrLogicParamsFactory.getClickCount(params))
    },

    /**
     * Makes a call to the clickrLogic smart contract using the `getHighestClickCount(account)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getHighestClickCount: (params: CallParams<ClickrLogicArgs['obj']['getHighestClickCount(account)uint64'] | ClickrLogicArgs['tuple']['getHighestClickCount(account)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ClickrLogicParamsFactory.getHighestClickCount(params))
    },

    /**
     * Makes a call to the clickrLogic smart contract using the `getHeartCount(account)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getHeartCount: (params: CallParams<ClickrLogicArgs['obj']['getHeartCount(account)uint64'] | ClickrLogicArgs['tuple']['getHeartCount(account)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ClickrLogicParamsFactory.getHeartCount(params))
    },

    /**
     * Makes a call to the clickrLogic smart contract using the `getUserAllTimeClickCount(account)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getUserAllTimeClickCount: (params: CallParams<ClickrLogicArgs['obj']['getUserAllTimeClickCount(account)uint64'] | ClickrLogicArgs['tuple']['getUserAllTimeClickCount(account)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ClickrLogicParamsFactory.getUserAllTimeClickCount(params))
    },

    /**
     * Makes a call to the clickrLogic smart contract using the `clickProcessed(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    clickProcessed: (params: CallParams<ClickrLogicArgs['obj']['clickProcessed(account)void'] | ClickrLogicArgs['tuple']['clickProcessed(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ClickrLogicParamsFactory.clickProcessed(params))
    },

    /**
     * Makes a call to the clickrLogic smart contract using the `decrementHeart(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    decrementHeart: (params: CallParams<ClickrLogicArgs['obj']['decrementHeart(account)void'] | ClickrLogicArgs['tuple']['decrementHeart(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ClickrLogicParamsFactory.decrementHeart(params))
    },

    /**
     * Makes a call to the clickrLogic smart contract using the `distributeRewards()void` ABI method.
     *
    * Distributes the contract's balance to the user with the highest global click count.
    The fee is set to 0 so the sender of the app call covers the transaction fee.
    The sender of the payment is the smart contract's own balance.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    distributeRewards: (params: CallParams<ClickrLogicArgs['obj']['distributeRewards()void'] | ClickrLogicArgs['tuple']['distributeRewards()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(ClickrLogicParamsFactory.distributeRewards(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the clickrLogic smart contract using the `optIn()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The optIn result
       */
      optIn: async (params: CallParams<ClickrLogicArgs['obj']['optIn()void'] | ClickrLogicArgs['tuple']['optIn()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.optIn(ClickrLogicParamsFactory.optIn.optIn(params))
        return {...result, return: result.return as unknown as (undefined | ClickrLogicReturns['optIn()void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the clickrLogic smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the clickrLogic smart contract using the `recordClick()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    recordClick: async (params: CallParams<ClickrLogicArgs['obj']['recordClick()void'] | ClickrLogicArgs['tuple']['recordClick()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(ClickrLogicParamsFactory.recordClick(params))
      return {...result, return: result.return as unknown as (undefined | ClickrLogicReturns['recordClick()void'])}
    },

    /**
     * Makes a call to the clickrLogic smart contract using the `getClickCount(account)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getClickCount: async (params: CallParams<ClickrLogicArgs['obj']['getClickCount(account)uint64'] | ClickrLogicArgs['tuple']['getClickCount(account)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ClickrLogicParamsFactory.getClickCount(params))
      return {...result, return: result.return as unknown as (undefined | ClickrLogicReturns['getClickCount(account)uint64'])}
    },

    /**
     * Makes a call to the clickrLogic smart contract using the `getHighestClickCount(account)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getHighestClickCount: async (params: CallParams<ClickrLogicArgs['obj']['getHighestClickCount(account)uint64'] | ClickrLogicArgs['tuple']['getHighestClickCount(account)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ClickrLogicParamsFactory.getHighestClickCount(params))
      return {...result, return: result.return as unknown as (undefined | ClickrLogicReturns['getHighestClickCount(account)uint64'])}
    },

    /**
     * Makes a call to the clickrLogic smart contract using the `getHeartCount(account)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getHeartCount: async (params: CallParams<ClickrLogicArgs['obj']['getHeartCount(account)uint64'] | ClickrLogicArgs['tuple']['getHeartCount(account)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ClickrLogicParamsFactory.getHeartCount(params))
      return {...result, return: result.return as unknown as (undefined | ClickrLogicReturns['getHeartCount(account)uint64'])}
    },

    /**
     * Makes a call to the clickrLogic smart contract using the `getUserAllTimeClickCount(account)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getUserAllTimeClickCount: async (params: CallParams<ClickrLogicArgs['obj']['getUserAllTimeClickCount(account)uint64'] | ClickrLogicArgs['tuple']['getUserAllTimeClickCount(account)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ClickrLogicParamsFactory.getUserAllTimeClickCount(params))
      return {...result, return: result.return as unknown as (undefined | ClickrLogicReturns['getUserAllTimeClickCount(account)uint64'])}
    },

    /**
     * Makes a call to the clickrLogic smart contract using the `clickProcessed(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    clickProcessed: async (params: CallParams<ClickrLogicArgs['obj']['clickProcessed(account)void'] | ClickrLogicArgs['tuple']['clickProcessed(account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ClickrLogicParamsFactory.clickProcessed(params))
      return {...result, return: result.return as unknown as (undefined | ClickrLogicReturns['clickProcessed(account)void'])}
    },

    /**
     * Makes a call to the clickrLogic smart contract using the `decrementHeart(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    decrementHeart: async (params: CallParams<ClickrLogicArgs['obj']['decrementHeart(account)void'] | ClickrLogicArgs['tuple']['decrementHeart(account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ClickrLogicParamsFactory.decrementHeart(params))
      return {...result, return: result.return as unknown as (undefined | ClickrLogicReturns['decrementHeart(account)void'])}
    },

    /**
     * Makes a call to the clickrLogic smart contract using the `distributeRewards()void` ABI method.
     *
    * Distributes the contract's balance to the user with the highest global click count.
    The fee is set to 0 so the sender of the app call covers the transaction fee.
    The sender of the payment is the smart contract's own balance.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    distributeRewards: async (params: CallParams<ClickrLogicArgs['obj']['distributeRewards()void'] | ClickrLogicArgs['tuple']['distributeRewards()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(ClickrLogicParamsFactory.distributeRewards(params))
      return {...result, return: result.return as unknown as (undefined | ClickrLogicReturns['distributeRewards()void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new ClickrLogicClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current clickrLogic app
   */
  state = {
    /**
     * Methods to access global state for the current clickrLogic app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          highestClickCount: result.highestClickCount,
          highestClickCountAddress: new BinaryStateValue(result.highestClickCountAddress),
          lastRewardTime: result.lastRewardTime,
        }
      },
      /**
       * Get the current value of the highestClickCount key in global state
       */
      highestClickCount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("highestClickCount")) as bigint | undefined },
      /**
       * Get the current value of the highestClickCountAddress key in global state
       */
      highestClickCountAddress: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("highestClickCountAddress")) as Uint8Array | undefined) },
      /**
       * Get the current value of the lastRewardTime key in global state
       */
      lastRewardTime: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("lastRewardTime")) as bigint | undefined },
    },
    /**
     * Methods to access local state for the current clickrLogic app
     */
    local: (address: string | Address) => {
      const encodedAddress = typeof address === 'string' ? address : encodeAddress(address.publicKey)
      return {
        /**
         * Get all current keyed values from local state
         */
        getAll: async (): Promise<Partial<Expand<LocalKeysState>>> => {
          const result = await this.appClient.state.local(encodedAddress).getAll()
          return {
            userClickCount: result.userClickCount,
            userHeartCount: result.userHeartCount,
            userHighestClickCount: result.userHighestClickCount,
            useAllTimeClickCount: result.useAllTimeClickCount,
          }
        },
        /**
         * Get the current value of the userClickCount key in local state
         */
        userClickCount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("userClickCount")) as bigint | undefined },
        /**
         * Get the current value of the userHeartCount key in local state
         */
        userHeartCount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("userHeartCount")) as bigint | undefined },
        /**
         * Get the current value of the userHighestClickCount key in local state
         */
        userHighestClickCount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("userHighestClickCount")) as bigint | undefined },
        /**
         * Get the current value of the useAllTimeClickCount key in local state
         */
        useAllTimeClickCount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("useAllTimeClickCount")) as bigint | undefined },
      }
    },
  }

  public newGroup(): ClickrLogicComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a recordClick()void method call against the clickrLogic contract
       */
      recordClick(params: CallParams<ClickrLogicArgs['obj']['recordClick()void'] | ClickrLogicArgs['tuple']['recordClick()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.recordClick(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getClickCount(account)uint64 method call against the clickrLogic contract
       */
      getClickCount(params: CallParams<ClickrLogicArgs['obj']['getClickCount(account)uint64'] | ClickrLogicArgs['tuple']['getClickCount(account)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getClickCount(params)))
        resultMappers.push((v) => client.decodeReturnValue('getClickCount(account)uint64', v))
        return this
      },
      /**
       * Add a getHighestClickCount(account)uint64 method call against the clickrLogic contract
       */
      getHighestClickCount(params: CallParams<ClickrLogicArgs['obj']['getHighestClickCount(account)uint64'] | ClickrLogicArgs['tuple']['getHighestClickCount(account)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getHighestClickCount(params)))
        resultMappers.push((v) => client.decodeReturnValue('getHighestClickCount(account)uint64', v))
        return this
      },
      /**
       * Add a getHeartCount(account)uint64 method call against the clickrLogic contract
       */
      getHeartCount(params: CallParams<ClickrLogicArgs['obj']['getHeartCount(account)uint64'] | ClickrLogicArgs['tuple']['getHeartCount(account)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getHeartCount(params)))
        resultMappers.push((v) => client.decodeReturnValue('getHeartCount(account)uint64', v))
        return this
      },
      /**
       * Add a getUserAllTimeClickCount(account)uint64 method call against the clickrLogic contract
       */
      getUserAllTimeClickCount(params: CallParams<ClickrLogicArgs['obj']['getUserAllTimeClickCount(account)uint64'] | ClickrLogicArgs['tuple']['getUserAllTimeClickCount(account)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getUserAllTimeClickCount(params)))
        resultMappers.push((v) => client.decodeReturnValue('getUserAllTimeClickCount(account)uint64', v))
        return this
      },
      /**
       * Add a clickProcessed(account)void method call against the clickrLogic contract
       */
      clickProcessed(params: CallParams<ClickrLogicArgs['obj']['clickProcessed(account)void'] | ClickrLogicArgs['tuple']['clickProcessed(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.clickProcessed(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a decrementHeart(account)void method call against the clickrLogic contract
       */
      decrementHeart(params: CallParams<ClickrLogicArgs['obj']['decrementHeart(account)void'] | ClickrLogicArgs['tuple']['decrementHeart(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.decrementHeart(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a distributeRewards()void method call against the clickrLogic contract
       */
      distributeRewards(params: CallParams<ClickrLogicArgs['obj']['distributeRewards()void'] | ClickrLogicArgs['tuple']['distributeRewards()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.distributeRewards(params)))
        resultMappers.push(undefined)
        return this
      },
      get optIn() {
        return {
          optIn: (params: CallParams<ClickrLogicArgs['obj']['optIn()void'] | ClickrLogicArgs['tuple']['optIn()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optIn.optIn(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the clickrLogic contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as ClickrLogicComposer
  }
}
export type ClickrLogicComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the recordClick()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  recordClick(params?: CallParams<ClickrLogicArgs['obj']['recordClick()void'] | ClickrLogicArgs['tuple']['recordClick()void']>): ClickrLogicComposer<[...TReturns, ClickrLogicReturns['recordClick()void'] | undefined]>

  /**
   * Calls the getClickCount(account)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getClickCount(params?: CallParams<ClickrLogicArgs['obj']['getClickCount(account)uint64'] | ClickrLogicArgs['tuple']['getClickCount(account)uint64']>): ClickrLogicComposer<[...TReturns, ClickrLogicReturns['getClickCount(account)uint64'] | undefined]>

  /**
   * Calls the getHighestClickCount(account)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getHighestClickCount(params?: CallParams<ClickrLogicArgs['obj']['getHighestClickCount(account)uint64'] | ClickrLogicArgs['tuple']['getHighestClickCount(account)uint64']>): ClickrLogicComposer<[...TReturns, ClickrLogicReturns['getHighestClickCount(account)uint64'] | undefined]>

  /**
   * Calls the getHeartCount(account)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getHeartCount(params?: CallParams<ClickrLogicArgs['obj']['getHeartCount(account)uint64'] | ClickrLogicArgs['tuple']['getHeartCount(account)uint64']>): ClickrLogicComposer<[...TReturns, ClickrLogicReturns['getHeartCount(account)uint64'] | undefined]>

  /**
   * Calls the getUserAllTimeClickCount(account)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getUserAllTimeClickCount(params?: CallParams<ClickrLogicArgs['obj']['getUserAllTimeClickCount(account)uint64'] | ClickrLogicArgs['tuple']['getUserAllTimeClickCount(account)uint64']>): ClickrLogicComposer<[...TReturns, ClickrLogicReturns['getUserAllTimeClickCount(account)uint64'] | undefined]>

  /**
   * Calls the clickProcessed(account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clickProcessed(params?: CallParams<ClickrLogicArgs['obj']['clickProcessed(account)void'] | ClickrLogicArgs['tuple']['clickProcessed(account)void']>): ClickrLogicComposer<[...TReturns, ClickrLogicReturns['clickProcessed(account)void'] | undefined]>

  /**
   * Calls the decrementHeart(account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  decrementHeart(params?: CallParams<ClickrLogicArgs['obj']['decrementHeart(account)void'] | ClickrLogicArgs['tuple']['decrementHeart(account)void']>): ClickrLogicComposer<[...TReturns, ClickrLogicReturns['decrementHeart(account)void'] | undefined]>

  /**
   * Calls the distributeRewards()void ABI method.
   *
  * Distributes the contract's balance to the user with the highest global click count.
  The fee is set to 0 so the sender of the app call covers the transaction fee.
  The sender of the payment is the smart contract's own balance.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  distributeRewards(params?: CallParams<ClickrLogicArgs['obj']['distributeRewards()void'] | ClickrLogicArgs['tuple']['distributeRewards()void']>): ClickrLogicComposer<[...TReturns, ClickrLogicReturns['distributeRewards()void'] | undefined]>

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the clickrLogic smart contract using the optIn()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    optIn(params?: CallParams<ClickrLogicArgs['obj']['optIn()void'] | ClickrLogicArgs['tuple']['optIn()void']>): ClickrLogicComposer<[...TReturns, ClickrLogicReturns['optIn()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the clickrLogic smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): ClickrLogicComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): ClickrLogicComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<ClickrLogicComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<ClickrLogicComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<ClickrLogicComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<ClickrLogicComposerResults<TReturns>>
}
export type ClickrLogicComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

