{
    "name": "clickrLogic",
    "structs": {},
    "methods": [
        {
            "name": "createApplication",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "optIn",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "OptIn"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "recordClick",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getClickCount",
            "args": [
                {
                    "type": "account",
                    "name": "user"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getHighestClickCount",
            "args": [
                {
                    "type": "account",
                    "name": "user"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getHeartCount",
            "args": [
                {
                    "type": "account",
                    "name": "user"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getUserAllTimeClickCount",
            "args": [
                {
                    "type": "account",
                    "name": "user"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "clickProcessed",
            "args": [
                {
                    "type": "account",
                    "name": "user"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "decrementHeart",
            "args": [
                {
                    "type": "account",
                    "name": "user"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "distributeRewards",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Distributes the contract's balance to the user with the highest global click count.\nThe fee is set to 0 so the sender of the app call covers the transaction fee.\nThe sender of the payment is the smart contract's own balance.",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 1
            },
            "local": {
                "ints": 4,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "highestClickCount": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Zw=="
                },
                "highestClickCountAddress": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "ZA=="
                }
            },
            "local": {
                "userClickCount": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YQ=="
                },
                "userHeartCount": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Yg=="
                },
                "userHighestClickCount": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Yw=="
                },
                "useAllTimeClickCount": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bA=="
                }
            },
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        558
                    ],
                    "errorMessage": "No available balance to send"
                },
                {
                    "pc": [
                        566
                    ],
                    "errorMessage": "No highest click holder found"
                },
                {
                    "pc": [
                        111,
                        123,
                        141,
                        159,
                        182,
                        205,
                        228,
                        251,
                        276
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        264
                    ],
                    "errorMessage": "OnCompletion is not OptIn"
                },
                {
                    "pc": [
                        335
                    ],
                    "errorMessage": "Only if user hearts are above 0 record click"
                },
                {
                    "pc": [
                        329
                    ],
                    "errorMessage": "Only the user can record a click"
                },
                {
                    "pc": [
                        533
                    ],
                    "errorMessage": "To decrement hearts there has to be atleast 1"
                },
                {
                    "pc": [
                        553
                    ],
                    "errorMessage": "account funded"
                },
                {
                    "pc": [
                        280
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        114,
                        126,
                        144,
                        162,
                        185,
                        208,
                        231,
                        254,
                        267
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        502,
                        562,
                        571
                    ],
                    "errorMessage": "check GlobalState exists"
                },
                {
                    "pc": [
                        334,
                        343,
                        381,
                        406,
                        430,
                        455,
                        479,
                        486,
                        532,
                        539
                    ],
                    "errorMessage": "check LocalState exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMCAxCiAgICBieXRlY2Jsb2NrICJhIiAiYiIgMHgxNTFmN2M3NSAiZCIgImMiICJnIiAibCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jbGlja3JfbG9naWMvY29udHJhY3QuYWxnby50czoxNQogICAgLy8gZXhwb3J0IGNsYXNzIGNsaWNrckxvZ2ljIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuIE51bUFwcEFyZ3MKICAgIGJ6IG1haW5fYWZ0ZXJfaWZfZWxzZUAxNgogICAgcHVzaGJ5dGVzcyAweGI4NDQ3YjM2IDB4MjkzMTRkOTUgMHhmZDYyYzY2ZCAweDllMjBmYzI2IDB4MjE2NjdlODYgMHhmYmFmNjc4ZiAweDI0MjFkOWMzIDB4NTkzMzM4ZGEgMHg1OWZiZGFjZSAweGIwYTkzODA3IC8vIG1ldGhvZCAiY3JlYXRlQXBwbGljYXRpb24oKXZvaWQiLCBtZXRob2QgIm9wdEluKCl2b2lkIiwgbWV0aG9kICJyZWNvcmRDbGljaygpdm9pZCIsIG1ldGhvZCAiZ2V0Q2xpY2tDb3VudChhY2NvdW50KXVpbnQ2NCIsIG1ldGhvZCAiZ2V0SGlnaGVzdENsaWNrQ291bnQoYWNjb3VudCl1aW50NjQiLCBtZXRob2QgImdldEhlYXJ0Q291bnQoYWNjb3VudCl1aW50NjQiLCBtZXRob2QgImdldFVzZXJBbGxUaW1lQ2xpY2tDb3VudChhY2NvdW50KXVpbnQ2NCIsIG1ldGhvZCAiY2xpY2tQcm9jZXNzZWQoYWNjb3VudCl2b2lkIiwgbWV0aG9kICJkZWNyZW1lbnRIZWFydChhY2NvdW50KXZvaWQiLCBtZXRob2QgImRpc3RyaWJ1dGVSZXdhcmRzKCl2b2lkIgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAogICAgbWF0Y2ggbWFpbl9jcmVhdGVBcHBsaWNhdGlvbl9yb3V0ZUAzIG1haW5fb3B0SW5fcm91dGVANCBtYWluX3JlY29yZENsaWNrX3JvdXRlQDUgbWFpbl9nZXRDbGlja0NvdW50X3JvdXRlQDYgbWFpbl9nZXRIaWdoZXN0Q2xpY2tDb3VudF9yb3V0ZUA3IG1haW5fZ2V0SGVhcnRDb3VudF9yb3V0ZUA4IG1haW5fZ2V0VXNlckFsbFRpbWVDbGlja0NvdW50X3JvdXRlQDkgbWFpbl9jbGlja1Byb2Nlc3NlZF9yb3V0ZUAxMCBtYWluX2RlY3JlbWVudEhlYXJ0X3JvdXRlQDExIG1haW5fZGlzdHJpYnV0ZVJld2FyZHNfcm91dGVAMTIKCm1haW5fYWZ0ZXJfaWZfZWxzZUAxNjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jbGlja3JfbG9naWMvY29udHJhY3QuYWxnby50czoxNQogICAgLy8gZXhwb3J0IGNsYXNzIGNsaWNrckxvZ2ljIGV4dGVuZHMgQ29udHJhY3QgewogICAgaW50Y18wIC8vIDAKICAgIHJldHVybgoKbWFpbl9kaXN0cmlidXRlUmV3YXJkc19yb3V0ZUAxMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jbGlja3JfbG9naWMvY29udHJhY3QuYWxnby50czoxMzgKICAgIC8vIEBhYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIGRpc3RyaWJ1dGVSZXdhcmRzCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2RlY3JlbWVudEhlYXJ0X3JvdXRlQDExOgogICAgLy8gc21hcnRfY29udHJhY3RzL2NsaWNrcl9sb2dpYy9jb250cmFjdC5hbGdvLnRzOjEyNQogICAgLy8gQGFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jbGlja3JfbG9naWMvY29udHJhY3QuYWxnby50czoxNQogICAgLy8gZXhwb3J0IGNsYXNzIGNsaWNrckxvZ2ljIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgdHhuYXMgQWNjb3VudHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jbGlja3JfbG9naWMvY29udHJhY3QuYWxnby50czoxMjUKICAgIC8vIEBhYmltZXRob2QoKQogICAgY2FsbHN1YiBkZWNyZW1lbnRIZWFydAogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9jbGlja1Byb2Nlc3NlZF9yb3V0ZUAxMDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jbGlja3JfbG9naWMvY29udHJhY3QuYWxnby50czoxMDAKICAgIC8vIEBhYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2xpY2tyX2xvZ2ljL2NvbnRyYWN0LmFsZ28udHM6MTUKICAgIC8vIGV4cG9ydCBjbGFzcyBjbGlja3JMb2dpYyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIHR4bmFzIEFjY291bnRzCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2xpY2tyX2xvZ2ljL2NvbnRyYWN0LmFsZ28udHM6MTAwCiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIGNhbGxzdWIgY2xpY2tQcm9jZXNzZWQKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fZ2V0VXNlckFsbFRpbWVDbGlja0NvdW50X3JvdXRlQDk6CiAgICAvLyBzbWFydF9jb250cmFjdHMvY2xpY2tyX2xvZ2ljL2NvbnRyYWN0LmFsZ28udHM6OTUKICAgIC8vIEBhYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2xpY2tyX2xvZ2ljL2NvbnRyYWN0LmFsZ28udHM6MTUKICAgIC8vIGV4cG9ydCBjbGFzcyBjbGlja3JMb2dpYyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIHR4bmFzIEFjY291bnRzCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2xpY2tyX2xvZ2ljL2NvbnRyYWN0LmFsZ28udHM6OTUKICAgIC8vIEBhYmltZXRob2QoKQogICAgY2FsbHN1YiBnZXRVc2VyQWxsVGltZUNsaWNrQ291bnQKICAgIGl0b2IKICAgIGJ5dGVjXzIgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fZ2V0SGVhcnRDb3VudF9yb3V0ZUA4OgogICAgLy8gc21hcnRfY29udHJhY3RzL2NsaWNrcl9sb2dpYy9jb250cmFjdC5hbGdvLnRzOjg5CiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL2NsaWNrcl9sb2dpYy9jb250cmFjdC5hbGdvLnRzOjE1CiAgICAvLyBleHBvcnQgY2xhc3MgY2xpY2tyTG9naWMgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICB0eG5hcyBBY2NvdW50cwogICAgLy8gc21hcnRfY29udHJhY3RzL2NsaWNrcl9sb2dpYy9jb250cmFjdC5hbGdvLnRzOjg5CiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIGNhbGxzdWIgZ2V0SGVhcnRDb3VudAogICAgaXRvYgogICAgYnl0ZWNfMiAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9nZXRIaWdoZXN0Q2xpY2tDb3VudF9yb3V0ZUA3OgogICAgLy8gc21hcnRfY29udHJhY3RzL2NsaWNrcl9sb2dpYy9jb250cmFjdC5hbGdvLnRzOjgzCiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL2NsaWNrcl9sb2dpYy9jb250cmFjdC5hbGdvLnRzOjE1CiAgICAvLyBleHBvcnQgY2xhc3MgY2xpY2tyTG9naWMgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICB0eG5hcyBBY2NvdW50cwogICAgLy8gc21hcnRfY29udHJhY3RzL2NsaWNrcl9sb2dpYy9jb250cmFjdC5hbGdvLnRzOjgzCiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIGNhbGxzdWIgZ2V0SGlnaGVzdENsaWNrQ291bnQKICAgIGl0b2IKICAgIGJ5dGVjXzIgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fZ2V0Q2xpY2tDb3VudF9yb3V0ZUA2OgogICAgLy8gc21hcnRfY29udHJhY3RzL2NsaWNrcl9sb2dpYy9jb250cmFjdC5hbGdvLnRzOjc3CiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL2NsaWNrcl9sb2dpYy9jb250cmFjdC5hbGdvLnRzOjE1CiAgICAvLyBleHBvcnQgY2xhc3MgY2xpY2tyTG9naWMgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICB0eG5hcyBBY2NvdW50cwogICAgLy8gc21hcnRfY29udHJhY3RzL2NsaWNrcl9sb2dpYy9jb250cmFjdC5hbGdvLnRzOjc3CiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIGNhbGxzdWIgZ2V0Q2xpY2tDb3VudAogICAgaXRvYgogICAgYnl0ZWNfMiAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9yZWNvcmRDbGlja19yb3V0ZUA1OgogICAgLy8gc21hcnRfY29udHJhY3RzL2NsaWNrcl9sb2dpYy9jb250cmFjdC5hbGdvLnRzOjYwCiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiByZWNvcmRDbGljawogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9vcHRJbl9yb3V0ZUA0OgogICAgLy8gc21hcnRfY29udHJhY3RzL2NsaWNrcl9sb2dpYy9jb250cmFjdC5hbGdvLnRzOjUxCiAgICAvLyBAYWJpbWV0aG9kKHsgYWxsb3dBY3Rpb25zOiAnT3B0SW4nIH0pCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBpbnRjXzEgLy8gT3B0SW4KICAgID09CiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBPcHRJbgogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIG9wdEluCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2NyZWF0ZUFwcGxpY2F0aW9uX3JvdXRlQDM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvY2xpY2tyX2xvZ2ljL2NvbnRyYWN0LmFsZ28udHM6NDAtNDIKICAgIC8vIEBhYmltZXRob2QoewogICAgLy8gICBvbkNyZWF0ZTogJ3JlcXVpcmUnLAogICAgLy8gfSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIGNyZWF0aW5nCiAgICBjYWxsc3ViIGNyZWF0ZUFwcGxpY2F0aW9uCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgoKLy8gc21hcnRfY29udHJhY3RzL2NsaWNrcl9sb2dpYy9jb250cmFjdC5hbGdvLnRzOjpjbGlja3JMb2dpYy5jcmVhdGVBcHBsaWNhdGlvbigpIC0+IHZvaWQ6CmNyZWF0ZUFwcGxpY2F0aW9uOgogICAgLy8gc21hcnRfY29udHJhY3RzL2NsaWNrcl9sb2dpYy9jb250cmFjdC5hbGdvLnRzOjE3CiAgICAvLyBoaWdoZXN0Q2xpY2tDb3VudCA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBrZXk6ICdnJyB9KQogICAgYnl0ZWMgNSAvLyAiZyIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jbGlja3JfbG9naWMvY29udHJhY3QuYWxnby50czo0NQogICAgLy8gdGhpcy5oaWdoZXN0Q2xpY2tDb3VudC52YWx1ZSA9IFVpbnQ2NCgwKSAvLyBJbml0aWFsaXplIGdsb2JhbCBoaWdoZXN0IGNsaWNrIGNvdW50CiAgICBpbnRjXzAgLy8gMAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jbGlja3JfbG9naWMvY29udHJhY3QuYWxnby50czoyMAogICAgLy8gaGlnaGVzdENsaWNrQ291bnRBZGRyZXNzID0gR2xvYmFsU3RhdGU8QWNjb3VudD4oeyBrZXk6ICdkJyB9KQogICAgYnl0ZWNfMyAvLyAiZCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jbGlja3JfbG9naWMvY29udHJhY3QuYWxnby50czo0NgogICAgLy8gdGhpcy5oaWdoZXN0Q2xpY2tDb3VudEFkZHJlc3MudmFsdWUgPSBHbG9iYWwuY3JlYXRvckFkZHJlc3MgLy8gaW5pdGxpc2Ugd2l0aCBhIGRlZmF1bHQgYWRkcmVzcwogICAgZ2xvYmFsIENyZWF0b3JBZGRyZXNzCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL2NsaWNrcl9sb2dpYy9jb250cmFjdC5hbGdvLnRzOjpjbGlja3JMb2dpYy5vcHRJbigpIC0+IHZvaWQ6Cm9wdEluOgogICAgLy8gc21hcnRfY29udHJhY3RzL2NsaWNrcl9sb2dpYy9jb250cmFjdC5hbGdvLnRzOjUzCiAgICAvLyB0aGlzLnVzZXJDbGlja0NvdW50KFR4bi5zZW5kZXIpLnZhbHVlID0gVWludDY0KDApIC8vIHN0YXJ0IGF0IDAgY2xpY2tzIGNvdW50CiAgICB0eG4gU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2xpY2tyX2xvZ2ljL2NvbnRyYWN0LmFsZ28udHM6MjkKICAgIC8vIHVzZXJDbGlja0NvdW50ID0gTG9jYWxTdGF0ZTx1aW50NjQ+KHsga2V5OiAnYScgfSkKICAgIGJ5dGVjXzAgLy8gImEiCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2xpY2tyX2xvZ2ljL2NvbnRyYWN0LmFsZ28udHM6NTMKICAgIC8vIHRoaXMudXNlckNsaWNrQ291bnQoVHhuLnNlbmRlcikudmFsdWUgPSBVaW50NjQoMCkgLy8gc3RhcnQgYXQgMCBjbGlja3MgY291bnQKICAgIGludGNfMCAvLyAwCiAgICBhcHBfbG9jYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvY2xpY2tyX2xvZ2ljL2NvbnRyYWN0LmFsZ28udHM6NTQKICAgIC8vIHRoaXMudXNlckhlYXJ0Q291bnQoVHhuLnNlbmRlcikudmFsdWUgPSBVaW50NjQoNSkgLy8gc3RhcnQgd2l0aCA1IGhlYXJ0cwogICAgdHhuIFNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL2NsaWNrcl9sb2dpYy9jb250cmFjdC5hbGdvLnRzOjMyCiAgICAvLyB1c2VySGVhcnRDb3VudCA9IExvY2FsU3RhdGU8dWludDY0Pih7IGtleTogJ2InIH0pCiAgICBieXRlY18xIC8vICJiIgogICAgLy8gc21hcnRfY29udHJhY3RzL2NsaWNrcl9sb2dpYy9jb250cmFjdC5hbGdvLnRzOjU0CiAgICAvLyB0aGlzLnVzZXJIZWFydENvdW50KFR4bi5zZW5kZXIpLnZhbHVlID0gVWludDY0KDUpIC8vIHN0YXJ0IHdpdGggNSBoZWFydHMKICAgIHB1c2hpbnQgNSAvLyA1CiAgICBhcHBfbG9jYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvY2xpY2tyX2xvZ2ljL2NvbnRyYWN0LmFsZ28udHM6NTUKICAgIC8vIHRoaXMudXNlckhpZ2hlc3RDbGlja0NvdW50KFR4bi5zZW5kZXIpLnZhbHVlID0gVWludDY0KDApIC8vIHN0b3JhZ2UgZm9yIGhpZ2hlc3QgdXNlciBjbGljayBjb3VudAogICAgdHhuIFNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL2NsaWNrcl9sb2dpYy9jb250cmFjdC5hbGdvLnRzOjM1CiAgICAvLyB1c2VySGlnaGVzdENsaWNrQ291bnQgPSBMb2NhbFN0YXRlPHVpbnQ2ND4oeyBrZXk6ICdjJyB9KQogICAgYnl0ZWMgNCAvLyAiYyIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jbGlja3JfbG9naWMvY29udHJhY3QuYWxnby50czo1NQogICAgLy8gdGhpcy51c2VySGlnaGVzdENsaWNrQ291bnQoVHhuLnNlbmRlcikudmFsdWUgPSBVaW50NjQoMCkgLy8gc3RvcmFnZSBmb3IgaGlnaGVzdCB1c2VyIGNsaWNrIGNvdW50CiAgICBpbnRjXzAgLy8gMAogICAgYXBwX2xvY2FsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2NsaWNrcl9sb2dpYy9jb250cmFjdC5hbGdvLnRzOjU2CiAgICAvLyB0aGlzLnVzZUFsbFRpbWVDbGlja0NvdW50KFR4bi5zZW5kZXIpLnZhbHVlID0gVWludDY0KDApIC8vIHN0b3JhZ2UgZm9yIHVzZXIgYWxsIHRpbWUgY2xpY2sgY291bnQKICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jbGlja3JfbG9naWMvY29udHJhY3QuYWxnby50czozOAogICAgLy8gdXNlQWxsVGltZUNsaWNrQ291bnQgPSBMb2NhbFN0YXRlPHVpbnQ2ND4oeyBrZXk6ICdsJyB9KQogICAgYnl0ZWMgNiAvLyAibCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jbGlja3JfbG9naWMvY29udHJhY3QuYWxnby50czo1NgogICAgLy8gdGhpcy51c2VBbGxUaW1lQ2xpY2tDb3VudChUeG4uc2VuZGVyKS52YWx1ZSA9IFVpbnQ2NCgwKSAvLyBzdG9yYWdlIGZvciB1c2VyIGFsbCB0aW1lIGNsaWNrIGNvdW50CiAgICBpbnRjXzAgLy8gMAogICAgYXBwX2xvY2FsX3B1dAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL2NsaWNrcl9sb2dpYy9jb250cmFjdC5hbGdvLnRzOjpjbGlja3JMb2dpYy5yZWNvcmRDbGljaygpIC0+IHZvaWQ6CnJlY29yZENsaWNrOgogICAgLy8gc21hcnRfY29udHJhY3RzL2NsaWNrcl9sb2dpYy9jb250cmFjdC5hbGdvLnRzOjYwLTYxCiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIC8vIHB1YmxpYyByZWNvcmRDbGljaygpOiB2b2lkIHsKICAgIHByb3RvIDAgMAogICAgLy8gc21hcnRfY29udHJhY3RzL2NsaWNrcl9sb2dpYy9jb250cmFjdC5hbGdvLnRzOjYzCiAgICAvLyBjb25zdCB1c2VyID0gVHhuLnNlbmRlcgogICAgdHhuIFNlbmRlcgogICAgZHVwbiAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2xpY2tyX2xvZ2ljL2NvbnRyYWN0LmFsZ28udHM6NjYKICAgIC8vIGFzc2VydChUeG4uc2VuZGVyID09PSB1c2VyLCAnT25seSB0aGUgdXNlciBjYW4gcmVjb3JkIGEgY2xpY2snKQogICAgZGlnIDEKICAgID09CiAgICBhc3NlcnQgLy8gT25seSB0aGUgdXNlciBjYW4gcmVjb3JkIGEgY2xpY2sKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jbGlja3JfbG9naWMvY29udHJhY3QuYWxnby50czo2OAogICAgLy8gYXNzZXJ0KHRoaXMudXNlckhlYXJ0Q291bnQodXNlcikudmFsdWUgPiAwLCAnT25seSBpZiB1c2VyIGhlYXJ0cyBhcmUgYWJvdmUgMCByZWNvcmQgY2xpY2snKQogICAgZHVwCiAgICBpbnRjXzAgLy8gMAogICAgLy8gc21hcnRfY29udHJhY3RzL2NsaWNrcl9sb2dpYy9jb250cmFjdC5hbGdvLnRzOjMyCiAgICAvLyB1c2VySGVhcnRDb3VudCA9IExvY2FsU3RhdGU8dWludDY0Pih7IGtleTogJ2InIH0pCiAgICBieXRlY18xIC8vICJiIgogICAgLy8gc21hcnRfY29udHJhY3RzL2NsaWNrcl9sb2dpYy9jb250cmFjdC5hbGdvLnRzOjY4CiAgICAvLyBhc3NlcnQodGhpcy51c2VySGVhcnRDb3VudCh1c2VyKS52YWx1ZSA+IDAsICdPbmx5IGlmIHVzZXIgaGVhcnRzIGFyZSBhYm92ZSAwIHJlY29yZCBjbGljaycpCiAgICBhcHBfbG9jYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgTG9jYWxTdGF0ZSBleGlzdHMKICAgIGFzc2VydCAvLyBPbmx5IGlmIHVzZXIgaGVhcnRzIGFyZSBhYm92ZSAwIHJlY29yZCBjbGljawogICAgLy8gc21hcnRfY29udHJhY3RzL2NsaWNrcl9sb2dpYy9jb250cmFjdC5hbGdvLnRzOjcxCiAgICAvLyBjb25zdCBjdXJyZW50Q291bnQgPSB0aGlzLnVzZXJDbGlja0NvdW50KHVzZXIpLnZhbHVlIHx8IFVpbnQ2NCgwKQogICAgaW50Y18wIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jbGlja3JfbG9naWMvY29udHJhY3QuYWxnby50czoyOQogICAgLy8gdXNlckNsaWNrQ291bnQgPSBMb2NhbFN0YXRlPHVpbnQ2ND4oeyBrZXk6ICdhJyB9KQogICAgYnl0ZWNfMCAvLyAiYSIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jbGlja3JfbG9naWMvY29udHJhY3QuYWxnby50czo3MQogICAgLy8gY29uc3QgY3VycmVudENvdW50ID0gdGhpcy51c2VyQ2xpY2tDb3VudCh1c2VyKS52YWx1ZSB8fCBVaW50NjQoMCkKICAgIGFwcF9sb2NhbF9nZXRfZXgKICAgIHN3YXAKICAgIGR1cAogICAgdW5jb3ZlciAyCiAgICBhc3NlcnQgLy8gY2hlY2sgTG9jYWxTdGF0ZSBleGlzdHMKICAgIGJ6IHJlY29yZENsaWNrX3Rlcm5hcnlfZmFsc2VAMgogICAgZnJhbWVfZGlnIDEKCnJlY29yZENsaWNrX3Rlcm5hcnlfbWVyZ2VAMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jbGlja3JfbG9naWMvY29udHJhY3QuYWxnby50czo3MgogICAgLy8gdGhpcy51c2VyQ2xpY2tDb3VudCh1c2VyKS52YWx1ZSA9IGN1cnJlbnRDb3VudCArIFVpbnQ2NCgxKQogICAgaW50Y18xIC8vIDEKICAgICsKICAgIGZyYW1lX2RpZyAwCiAgICBkdXAKICAgIGNvdmVyIDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jbGlja3JfbG9naWMvY29udHJhY3QuYWxnby50czoyOQogICAgLy8gdXNlckNsaWNrQ291bnQgPSBMb2NhbFN0YXRlPHVpbnQ2ND4oeyBrZXk6ICdhJyB9KQogICAgYnl0ZWNfMCAvLyAiYSIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jbGlja3JfbG9naWMvY29udHJhY3QuYWxnby50czo3MgogICAgLy8gdGhpcy51c2VyQ2xpY2tDb3VudCh1c2VyKS52YWx1ZSA9IGN1cnJlbnRDb3VudCArIFVpbnQ2NCgxKQogICAgZGlnIDIKICAgIGFwcF9sb2NhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jbGlja3JfbG9naWMvY29udHJhY3QuYWxnby50czozOAogICAgLy8gdXNlQWxsVGltZUNsaWNrQ291bnQgPSBMb2NhbFN0YXRlPHVpbnQ2ND4oeyBrZXk6ICdsJyB9KQogICAgYnl0ZWMgNiAvLyAibCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jbGlja3JfbG9naWMvY29udHJhY3QuYWxnby50czo3MwogICAgLy8gdGhpcy51c2VBbGxUaW1lQ2xpY2tDb3VudCh1c2VyKS52YWx1ZSA9IGN1cnJlbnRDb3VudCArIFVpbnQ2NCgxKQogICAgc3dhcAogICAgYXBwX2xvY2FsX3B1dAogICAgcmV0c3ViCgpyZWNvcmRDbGlja190ZXJuYXJ5X2ZhbHNlQDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvY2xpY2tyX2xvZ2ljL2NvbnRyYWN0LmFsZ28udHM6NzEKICAgIC8vIGNvbnN0IGN1cnJlbnRDb3VudCA9IHRoaXMudXNlckNsaWNrQ291bnQodXNlcikudmFsdWUgfHwgVWludDY0KDApCiAgICBpbnRjXzAgLy8gMAogICAgYiByZWNvcmRDbGlja190ZXJuYXJ5X21lcmdlQDMKCgovLyBzbWFydF9jb250cmFjdHMvY2xpY2tyX2xvZ2ljL2NvbnRyYWN0LmFsZ28udHM6OmNsaWNrckxvZ2ljLmdldENsaWNrQ291bnQodXNlcjogYnl0ZXMpIC0+IHVpbnQ2NDoKZ2V0Q2xpY2tDb3VudDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jbGlja3JfbG9naWMvY29udHJhY3QuYWxnby50czo3Ny03OAogICAgLy8gQGFiaW1ldGhvZCgpCiAgICAvLyBwdWJsaWMgZ2V0Q2xpY2tDb3VudCh1c2VyOiBBY2NvdW50KTogdWludDY0IHsKICAgIHByb3RvIDEgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2NsaWNrcl9sb2dpYy9jb250cmFjdC5hbGdvLnRzOjc5CiAgICAvLyByZXR1cm4gdGhpcy51c2VyQ2xpY2tDb3VudCh1c2VyKS52YWx1ZSB8fCBVaW50NjQoMCkKICAgIGZyYW1lX2RpZyAtMQogICAgaW50Y18wIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jbGlja3JfbG9naWMvY29udHJhY3QuYWxnby50czoyOQogICAgLy8gdXNlckNsaWNrQ291bnQgPSBMb2NhbFN0YXRlPHVpbnQ2ND4oeyBrZXk6ICdhJyB9KQogICAgYnl0ZWNfMCAvLyAiYSIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jbGlja3JfbG9naWMvY29udHJhY3QuYWxnby50czo3OQogICAgLy8gcmV0dXJuIHRoaXMudXNlckNsaWNrQ291bnQodXNlcikudmFsdWUgfHwgVWludDY0KDApCiAgICBhcHBfbG9jYWxfZ2V0X2V4CiAgICBzd2FwCiAgICBkdXAKICAgIHVuY292ZXIgMgogICAgYXNzZXJ0IC8vIGNoZWNrIExvY2FsU3RhdGUgZXhpc3RzCiAgICBieiBnZXRDbGlja0NvdW50X3Rlcm5hcnlfZmFsc2VAMgogICAgZnJhbWVfZGlnIDAKCmdldENsaWNrQ291bnRfdGVybmFyeV9tZXJnZUAzOgogICAgLy8gc21hcnRfY29udHJhY3RzL2NsaWNrcl9sb2dpYy9jb250cmFjdC5hbGdvLnRzOjc5CiAgICAvLyByZXR1cm4gdGhpcy51c2VyQ2xpY2tDb3VudCh1c2VyKS52YWx1ZSB8fCBVaW50NjQoMCkKICAgIHN3YXAKICAgIHJldHN1YgoKZ2V0Q2xpY2tDb3VudF90ZXJuYXJ5X2ZhbHNlQDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvY2xpY2tyX2xvZ2ljL2NvbnRyYWN0LmFsZ28udHM6NzkKICAgIC8vIHJldHVybiB0aGlzLnVzZXJDbGlja0NvdW50KHVzZXIpLnZhbHVlIHx8IFVpbnQ2NCgwKQogICAgaW50Y18wIC8vIDAKICAgIGIgZ2V0Q2xpY2tDb3VudF90ZXJuYXJ5X21lcmdlQDMKCgovLyBzbWFydF9jb250cmFjdHMvY2xpY2tyX2xvZ2ljL2NvbnRyYWN0LmFsZ28udHM6OmNsaWNrckxvZ2ljLmdldEhpZ2hlc3RDbGlja0NvdW50KHVzZXI6IGJ5dGVzKSAtPiB1aW50NjQ6CmdldEhpZ2hlc3RDbGlja0NvdW50OgogICAgLy8gc21hcnRfY29udHJhY3RzL2NsaWNrcl9sb2dpYy9jb250cmFjdC5hbGdvLnRzOjgzLTg0CiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIC8vIHB1YmxpYyBnZXRIaWdoZXN0Q2xpY2tDb3VudCh1c2VyOiBBY2NvdW50KTogdWludDY0IHsKICAgIHByb3RvIDEgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2NsaWNrcl9sb2dpYy9jb250cmFjdC5hbGdvLnRzOjg1CiAgICAvLyByZXR1cm4gdGhpcy51c2VySGlnaGVzdENsaWNrQ291bnQodXNlcikudmFsdWUgfHwgVWludDY0KDApCiAgICBmcmFtZV9kaWcgLTEKICAgIGludGNfMCAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2xpY2tyX2xvZ2ljL2NvbnRyYWN0LmFsZ28udHM6MzUKICAgIC8vIHVzZXJIaWdoZXN0Q2xpY2tDb3VudCA9IExvY2FsU3RhdGU8dWludDY0Pih7IGtleTogJ2MnIH0pCiAgICBieXRlYyA0IC8vICJjIgogICAgLy8gc21hcnRfY29udHJhY3RzL2NsaWNrcl9sb2dpYy9jb250cmFjdC5hbGdvLnRzOjg1CiAgICAvLyByZXR1cm4gdGhpcy51c2VySGlnaGVzdENsaWNrQ291bnQodXNlcikudmFsdWUgfHwgVWludDY0KDApCiAgICBhcHBfbG9jYWxfZ2V0X2V4CiAgICBzd2FwCiAgICBkdXAKICAgIHVuY292ZXIgMgogICAgYXNzZXJ0IC8vIGNoZWNrIExvY2FsU3RhdGUgZXhpc3RzCiAgICBieiBnZXRIaWdoZXN0Q2xpY2tDb3VudF90ZXJuYXJ5X2ZhbHNlQDIKICAgIGZyYW1lX2RpZyAwCgpnZXRIaWdoZXN0Q2xpY2tDb3VudF90ZXJuYXJ5X21lcmdlQDM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvY2xpY2tyX2xvZ2ljL2NvbnRyYWN0LmFsZ28udHM6ODUKICAgIC8vIHJldHVybiB0aGlzLnVzZXJIaWdoZXN0Q2xpY2tDb3VudCh1c2VyKS52YWx1ZSB8fCBVaW50NjQoMCkKICAgIHN3YXAKICAgIHJldHN1YgoKZ2V0SGlnaGVzdENsaWNrQ291bnRfdGVybmFyeV9mYWxzZUAyOgogICAgLy8gc21hcnRfY29udHJhY3RzL2NsaWNrcl9sb2dpYy9jb250cmFjdC5hbGdvLnRzOjg1CiAgICAvLyByZXR1cm4gdGhpcy51c2VySGlnaGVzdENsaWNrQ291bnQodXNlcikudmFsdWUgfHwgVWludDY0KDApCiAgICBpbnRjXzAgLy8gMAogICAgYiBnZXRIaWdoZXN0Q2xpY2tDb3VudF90ZXJuYXJ5X21lcmdlQDMKCgovLyBzbWFydF9jb250cmFjdHMvY2xpY2tyX2xvZ2ljL2NvbnRyYWN0LmFsZ28udHM6OmNsaWNrckxvZ2ljLmdldEhlYXJ0Q291bnQodXNlcjogYnl0ZXMpIC0+IHVpbnQ2NDoKZ2V0SGVhcnRDb3VudDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jbGlja3JfbG9naWMvY29udHJhY3QuYWxnby50czo4OS05MAogICAgLy8gQGFiaW1ldGhvZCgpCiAgICAvLyBwdWJsaWMgZ2V0SGVhcnRDb3VudCh1c2VyOiBBY2NvdW50KTogdWludDY0IHsKICAgIHByb3RvIDEgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2NsaWNrcl9sb2dpYy9jb250cmFjdC5hbGdvLnRzOjkxCiAgICAvLyByZXR1cm4gdGhpcy51c2VySGVhcnRDb3VudCh1c2VyKS52YWx1ZSB8fCBVaW50NjQoMCkKICAgIGZyYW1lX2RpZyAtMQogICAgaW50Y18wIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jbGlja3JfbG9naWMvY29udHJhY3QuYWxnby50czozMgogICAgLy8gdXNlckhlYXJ0Q291bnQgPSBMb2NhbFN0YXRlPHVpbnQ2ND4oeyBrZXk6ICdiJyB9KQogICAgYnl0ZWNfMSAvLyAiYiIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jbGlja3JfbG9naWMvY29udHJhY3QuYWxnby50czo5MQogICAgLy8gcmV0dXJuIHRoaXMudXNlckhlYXJ0Q291bnQodXNlcikudmFsdWUgfHwgVWludDY0KDApCiAgICBhcHBfbG9jYWxfZ2V0X2V4CiAgICBzd2FwCiAgICBkdXAKICAgIHVuY292ZXIgMgogICAgYXNzZXJ0IC8vIGNoZWNrIExvY2FsU3RhdGUgZXhpc3RzCiAgICBieiBnZXRIZWFydENvdW50X3Rlcm5hcnlfZmFsc2VAMgogICAgZnJhbWVfZGlnIDAKCmdldEhlYXJ0Q291bnRfdGVybmFyeV9tZXJnZUAzOgogICAgLy8gc21hcnRfY29udHJhY3RzL2NsaWNrcl9sb2dpYy9jb250cmFjdC5hbGdvLnRzOjkxCiAgICAvLyByZXR1cm4gdGhpcy51c2VySGVhcnRDb3VudCh1c2VyKS52YWx1ZSB8fCBVaW50NjQoMCkKICAgIHN3YXAKICAgIHJldHN1YgoKZ2V0SGVhcnRDb3VudF90ZXJuYXJ5X2ZhbHNlQDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvY2xpY2tyX2xvZ2ljL2NvbnRyYWN0LmFsZ28udHM6OTEKICAgIC8vIHJldHVybiB0aGlzLnVzZXJIZWFydENvdW50KHVzZXIpLnZhbHVlIHx8IFVpbnQ2NCgwKQogICAgaW50Y18wIC8vIDAKICAgIGIgZ2V0SGVhcnRDb3VudF90ZXJuYXJ5X21lcmdlQDMKCgovLyBzbWFydF9jb250cmFjdHMvY2xpY2tyX2xvZ2ljL2NvbnRyYWN0LmFsZ28udHM6OmNsaWNrckxvZ2ljLmdldFVzZXJBbGxUaW1lQ2xpY2tDb3VudCh1c2VyOiBieXRlcykgLT4gdWludDY0OgpnZXRVc2VyQWxsVGltZUNsaWNrQ291bnQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvY2xpY2tyX2xvZ2ljL2NvbnRyYWN0LmFsZ28udHM6OTUtOTYKICAgIC8vIEBhYmltZXRob2QoKQogICAgLy8gcHVibGljIGdldFVzZXJBbGxUaW1lQ2xpY2tDb3VudCh1c2VyOiBBY2NvdW50KTogdWludDY0IHsKICAgIHByb3RvIDEgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2NsaWNrcl9sb2dpYy9jb250cmFjdC5hbGdvLnRzOjk3CiAgICAvLyByZXR1cm4gdGhpcy51c2VBbGxUaW1lQ2xpY2tDb3VudCh1c2VyKS52YWx1ZSB8fCBVaW50NjQoMCkKICAgIGZyYW1lX2RpZyAtMQogICAgaW50Y18wIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jbGlja3JfbG9naWMvY29udHJhY3QuYWxnby50czozOAogICAgLy8gdXNlQWxsVGltZUNsaWNrQ291bnQgPSBMb2NhbFN0YXRlPHVpbnQ2ND4oeyBrZXk6ICdsJyB9KQogICAgYnl0ZWMgNiAvLyAibCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jbGlja3JfbG9naWMvY29udHJhY3QuYWxnby50czo5NwogICAgLy8gcmV0dXJuIHRoaXMudXNlQWxsVGltZUNsaWNrQ291bnQodXNlcikudmFsdWUgfHwgVWludDY0KDApCiAgICBhcHBfbG9jYWxfZ2V0X2V4CiAgICBzd2FwCiAgICBkdXAKICAgIHVuY292ZXIgMgogICAgYXNzZXJ0IC8vIGNoZWNrIExvY2FsU3RhdGUgZXhpc3RzCiAgICBieiBnZXRVc2VyQWxsVGltZUNsaWNrQ291bnRfdGVybmFyeV9mYWxzZUAyCiAgICBmcmFtZV9kaWcgMAoKZ2V0VXNlckFsbFRpbWVDbGlja0NvdW50X3Rlcm5hcnlfbWVyZ2VAMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jbGlja3JfbG9naWMvY29udHJhY3QuYWxnby50czo5NwogICAgLy8gcmV0dXJuIHRoaXMudXNlQWxsVGltZUNsaWNrQ291bnQodXNlcikudmFsdWUgfHwgVWludDY0KDApCiAgICBzd2FwCiAgICByZXRzdWIKCmdldFVzZXJBbGxUaW1lQ2xpY2tDb3VudF90ZXJuYXJ5X2ZhbHNlQDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvY2xpY2tyX2xvZ2ljL2NvbnRyYWN0LmFsZ28udHM6OTcKICAgIC8vIHJldHVybiB0aGlzLnVzZUFsbFRpbWVDbGlja0NvdW50KHVzZXIpLnZhbHVlIHx8IFVpbnQ2NCgwKQogICAgaW50Y18wIC8vIDAKICAgIGIgZ2V0VXNlckFsbFRpbWVDbGlja0NvdW50X3Rlcm5hcnlfbWVyZ2VAMwoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9jbGlja3JfbG9naWMvY29udHJhY3QuYWxnby50czo6Y2xpY2tyTG9naWMuY2xpY2tQcm9jZXNzZWQodXNlcjogYnl0ZXMpIC0+IHZvaWQ6CmNsaWNrUHJvY2Vzc2VkOgogICAgLy8gc21hcnRfY29udHJhY3RzL2NsaWNrcl9sb2dpYy9jb250cmFjdC5hbGdvLnRzOjEwMC0xMDEKICAgIC8vIEBhYmltZXRob2QoKQogICAgLy8gcHVibGljIGNsaWNrUHJvY2Vzc2VkKHVzZXI6IEFjY291bnQpOiB2b2lkIHsKICAgIHByb3RvIDEgMAogICAgLy8gc21hcnRfY29udHJhY3RzL2NsaWNrcl9sb2dpYy9jb250cmFjdC5hbGdvLnRzOjEwNgogICAgLy8gY29uc3QgY3VycmVudENsaWNrcyA9IHRoaXMudXNlckNsaWNrQ291bnQodXNlcikudmFsdWUKICAgIGZyYW1lX2RpZyAtMQogICAgaW50Y18wIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jbGlja3JfbG9naWMvY29udHJhY3QuYWxnby50czoyOQogICAgLy8gdXNlckNsaWNrQ291bnQgPSBMb2NhbFN0YXRlPHVpbnQ2ND4oeyBrZXk6ICdhJyB9KQogICAgYnl0ZWNfMCAvLyAiYSIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jbGlja3JfbG9naWMvY29udHJhY3QuYWxnby50czoxMDYKICAgIC8vIGNvbnN0IGN1cnJlbnRDbGlja3MgPSB0aGlzLnVzZXJDbGlja0NvdW50KHVzZXIpLnZhbHVlCiAgICBhcHBfbG9jYWxfZ2V0X2V4CiAgICBzd2FwCiAgICBkdXAKICAgIHVuY292ZXIgMgogICAgYXNzZXJ0IC8vIGNoZWNrIExvY2FsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2xpY2tyX2xvZ2ljL2NvbnRyYWN0LmFsZ28udHM6MTA3CiAgICAvLyBjb25zdCBoaWdoZXN0Q2xpY2tzID0gdGhpcy51c2VySGlnaGVzdENsaWNrQ291bnQodXNlcikudmFsdWUKICAgIGZyYW1lX2RpZyAtMQogICAgaW50Y18wIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jbGlja3JfbG9naWMvY29udHJhY3QuYWxnby50czozNQogICAgLy8gdXNlckhpZ2hlc3RDbGlja0NvdW50ID0gTG9jYWxTdGF0ZTx1aW50NjQ+KHsga2V5OiAnYycgfSkKICAgIGJ5dGVjIDQgLy8gImMiCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2xpY2tyX2xvZ2ljL2NvbnRyYWN0LmFsZ28udHM6MTA3CiAgICAvLyBjb25zdCBoaWdoZXN0Q2xpY2tzID0gdGhpcy51c2VySGlnaGVzdENsaWNrQ291bnQodXNlcikudmFsdWUKICAgIGFwcF9sb2NhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBMb2NhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL2NsaWNrcl9sb2dpYy9jb250cmFjdC5hbGdvLnRzOjExMAogICAgLy8gaWYgKGN1cnJlbnRDbGlja3MgPiBoaWdoZXN0Q2xpY2tzKSB7CiAgICA+CiAgICBieiBjbGlja1Byb2Nlc3NlZF9hZnRlcl9pZl9lbHNlQDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jbGlja3JfbG9naWMvY29udHJhY3QuYWxnby50czoxMTIKICAgIC8vIHRoaXMudXNlckhpZ2hlc3RDbGlja0NvdW50KHVzZXIpLnZhbHVlID0gY3VycmVudENsaWNrcwogICAgZnJhbWVfZGlnIC0xCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2xpY2tyX2xvZ2ljL2NvbnRyYWN0LmFsZ28udHM6MzUKICAgIC8vIHVzZXJIaWdoZXN0Q2xpY2tDb3VudCA9IExvY2FsU3RhdGU8dWludDY0Pih7IGtleTogJ2MnIH0pCiAgICBieXRlYyA0IC8vICJjIgogICAgLy8gc21hcnRfY29udHJhY3RzL2NsaWNrcl9sb2dpYy9jb250cmFjdC5hbGdvLnRzOjExMgogICAgLy8gdGhpcy51c2VySGlnaGVzdENsaWNrQ291bnQodXNlcikudmFsdWUgPSBjdXJyZW50Q2xpY2tzCiAgICBmcmFtZV9kaWcgMAogICAgYXBwX2xvY2FsX3B1dAoKY2xpY2tQcm9jZXNzZWRfYWZ0ZXJfaWZfZWxzZUAyOgogICAgLy8gc21hcnRfY29udHJhY3RzL2NsaWNrcl9sb2dpYy9jb250cmFjdC5hbGdvLnRzOjE3CiAgICAvLyBoaWdoZXN0Q2xpY2tDb3VudCA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBrZXk6ICdnJyB9KQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDUgLy8gImciCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL2NsaWNrcl9sb2dpYy9jb250cmFjdC5hbGdvLnRzOjExNgogICAgLy8gaWYgKGN1cnJlbnRDbGlja3MgPiB0aGlzLmhpZ2hlc3RDbGlja0NvdW50LnZhbHVlKSB7CiAgICBmcmFtZV9kaWcgMAogICAgPAogICAgYnogY2xpY2tQcm9jZXNzZWRfYWZ0ZXJfaWZfZWxzZUA0CiAgICAvLyBzbWFydF9jb250cmFjdHMvY2xpY2tyX2xvZ2ljL2NvbnRyYWN0LmFsZ28udHM6MTcKICAgIC8vIGhpZ2hlc3RDbGlja0NvdW50ID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGtleTogJ2cnIH0pCiAgICBieXRlYyA1IC8vICJnIgogICAgLy8gc21hcnRfY29udHJhY3RzL2NsaWNrcl9sb2dpYy9jb250cmFjdC5hbGdvLnRzOjExNwogICAgLy8gdGhpcy5oaWdoZXN0Q2xpY2tDb3VudC52YWx1ZSA9IGN1cnJlbnRDbGlja3MKICAgIGZyYW1lX2RpZyAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2NsaWNrcl9sb2dpYy9jb250cmFjdC5hbGdvLnRzOjIwCiAgICAvLyBoaWdoZXN0Q2xpY2tDb3VudEFkZHJlc3MgPSBHbG9iYWxTdGF0ZTxBY2NvdW50Pih7IGtleTogJ2QnIH0pCiAgICBieXRlY18zIC8vICJkIgogICAgLy8gc21hcnRfY29udHJhY3RzL2NsaWNrcl9sb2dpYy9jb250cmFjdC5hbGdvLnRzOjExOAogICAgLy8gdGhpcy5oaWdoZXN0Q2xpY2tDb3VudEFkZHJlc3MudmFsdWUgPSB1c2VyCiAgICBmcmFtZV9kaWcgLTEKICAgIGFwcF9nbG9iYWxfcHV0CgpjbGlja1Byb2Nlc3NlZF9hZnRlcl9pZl9lbHNlQDQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvY2xpY2tyX2xvZ2ljL2NvbnRyYWN0LmFsZ28udHM6MTIyCiAgICAvLyB0aGlzLnVzZXJDbGlja0NvdW50KHVzZXIpLnZhbHVlID0gVWludDY0KDApCiAgICBmcmFtZV9kaWcgLTEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jbGlja3JfbG9naWMvY29udHJhY3QuYWxnby50czoyOQogICAgLy8gdXNlckNsaWNrQ291bnQgPSBMb2NhbFN0YXRlPHVpbnQ2ND4oeyBrZXk6ICdhJyB9KQogICAgYnl0ZWNfMCAvLyAiYSIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jbGlja3JfbG9naWMvY29udHJhY3QuYWxnby50czoxMjIKICAgIC8vIHRoaXMudXNlckNsaWNrQ291bnQodXNlcikudmFsdWUgPSBVaW50NjQoMCkKICAgIGludGNfMCAvLyAwCiAgICBhcHBfbG9jYWxfcHV0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvY2xpY2tyX2xvZ2ljL2NvbnRyYWN0LmFsZ28udHM6OmNsaWNrckxvZ2ljLmRlY3JlbWVudEhlYXJ0KHVzZXI6IGJ5dGVzKSAtPiB2b2lkOgpkZWNyZW1lbnRIZWFydDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jbGlja3JfbG9naWMvY29udHJhY3QuYWxnby50czoxMjUtMTI2CiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIC8vIHB1YmxpYyBkZWNyZW1lbnRIZWFydCh1c2VyOiBBY2NvdW50KTogdm9pZCB7CiAgICBwcm90byAxIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jbGlja3JfbG9naWMvY29udHJhY3QuYWxnby50czoxMjcKICAgIC8vIGFzc2VydCh0aGlzLnVzZXJIZWFydENvdW50KHVzZXIpLnZhbHVlID4gMCwgJ1RvIGRlY3JlbWVudCBoZWFydHMgdGhlcmUgaGFzIHRvIGJlIGF0bGVhc3QgMScpCiAgICBmcmFtZV9kaWcgLTEKICAgIGludGNfMCAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2xpY2tyX2xvZ2ljL2NvbnRyYWN0LmFsZ28udHM6MzIKICAgIC8vIHVzZXJIZWFydENvdW50ID0gTG9jYWxTdGF0ZTx1aW50NjQ+KHsga2V5OiAnYicgfSkKICAgIGJ5dGVjXzEgLy8gImIiCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2xpY2tyX2xvZ2ljL2NvbnRyYWN0LmFsZ28udHM6MTI3CiAgICAvLyBhc3NlcnQodGhpcy51c2VySGVhcnRDb3VudCh1c2VyKS52YWx1ZSA+IDAsICdUbyBkZWNyZW1lbnQgaGVhcnRzIHRoZXJlIGhhcyB0byBiZSBhdGxlYXN0IDEnKQogICAgYXBwX2xvY2FsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIExvY2FsU3RhdGUgZXhpc3RzCiAgICBhc3NlcnQgLy8gVG8gZGVjcmVtZW50IGhlYXJ0cyB0aGVyZSBoYXMgdG8gYmUgYXRsZWFzdCAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2xpY2tyX2xvZ2ljL2NvbnRyYWN0LmFsZ28udHM6MTMwCiAgICAvLyB0aGlzLnVzZXJIZWFydENvdW50KHVzZXIpLnZhbHVlIC09IDEKICAgIGZyYW1lX2RpZyAtMQogICAgaW50Y18wIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jbGlja3JfbG9naWMvY29udHJhY3QuYWxnby50czozMgogICAgLy8gdXNlckhlYXJ0Q291bnQgPSBMb2NhbFN0YXRlPHVpbnQ2ND4oeyBrZXk6ICdiJyB9KQogICAgYnl0ZWNfMSAvLyAiYiIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jbGlja3JfbG9naWMvY29udHJhY3QuYWxnby50czoxMzAKICAgIC8vIHRoaXMudXNlckhlYXJ0Q291bnQodXNlcikudmFsdWUgLT0gMQogICAgYXBwX2xvY2FsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIExvY2FsU3RhdGUgZXhpc3RzCiAgICBpbnRjXzEgLy8gMQogICAgLQogICAgZnJhbWVfZGlnIC0xCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2xpY2tyX2xvZ2ljL2NvbnRyYWN0LmFsZ28udHM6MzIKICAgIC8vIHVzZXJIZWFydENvdW50ID0gTG9jYWxTdGF0ZTx1aW50NjQ+KHsga2V5OiAnYicgfSkKICAgIGJ5dGVjXzEgLy8gImIiCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2xpY2tyX2xvZ2ljL2NvbnRyYWN0LmFsZ28udHM6MTMwCiAgICAvLyB0aGlzLnVzZXJIZWFydENvdW50KHVzZXIpLnZhbHVlIC09IDEKICAgIHVuY292ZXIgMgogICAgYXBwX2xvY2FsX3B1dAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL2NsaWNrcl9sb2dpYy9jb250cmFjdC5hbGdvLnRzOjpjbGlja3JMb2dpYy5kaXN0cmlidXRlUmV3YXJkcygpIC0+IHZvaWQ6CmRpc3RyaWJ1dGVSZXdhcmRzOgogICAgLy8gc21hcnRfY29udHJhY3RzL2NsaWNrcl9sb2dpYy9jb250cmFjdC5hbGdvLnRzOjE0NAogICAgLy8gY29uc3QgYXBwQWRkcmVzcyA9IEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgLy8gc21hcnRfY29udHJhY3RzL2NsaWNrcl9sb2dpYy9jb250cmFjdC5hbGdvLnRzOjE0NwogICAgLy8gY29uc3QgYXZhaWxhYmxlQmFsYW5jZTogdWludDY0ID0gVWludDY0KGFwcEFkZHJlc3MuYmFsYW5jZSkgLSBVaW50NjQoR2xvYmFsLm1pbkJhbGFuY2UpCiAgICBhY2N0X3BhcmFtc19nZXQgQWNjdEJhbGFuY2UKICAgIGFzc2VydCAvLyBhY2NvdW50IGZ1bmRlZAogICAgZ2xvYmFsIE1pbkJhbGFuY2UKICAgIC0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jbGlja3JfbG9naWMvY29udHJhY3QuYWxnby50czoxNTAKICAgIC8vIGFzc2VydChhdmFpbGFibGVCYWxhbmNlID4gVWludDY0KDApLCAnTm8gYXZhaWxhYmxlIGJhbGFuY2UgdG8gc2VuZCcpCiAgICBkdXAKICAgIGFzc2VydCAvLyBObyBhdmFpbGFibGUgYmFsYW5jZSB0byBzZW5kCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2xpY2tyX2xvZ2ljL2NvbnRyYWN0LmFsZ28udHM6MjAKICAgIC8vIGhpZ2hlc3RDbGlja0NvdW50QWRkcmVzcyA9IEdsb2JhbFN0YXRlPEFjY291bnQ+KHsga2V5OiAnZCcgfSkKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18zIC8vICJkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jbGlja3JfbG9naWMvY29udHJhY3QuYWxnby50czoxNTMKICAgIC8vIGFzc2VydCh0aGlzLmhpZ2hlc3RDbGlja0NvdW50QWRkcmVzcy52YWx1ZSAhPT0gR2xvYmFsLnplcm9BZGRyZXNzLCAnTm8gaGlnaGVzdCBjbGljayBob2xkZXIgZm91bmQnKQogICAgZ2xvYmFsIFplcm9BZGRyZXNzCiAgICAhPQogICAgYXNzZXJ0IC8vIE5vIGhpZ2hlc3QgY2xpY2sgaG9sZGVyIGZvdW5kCiAgICAvLyBzbWFydF9jb250cmFjdHMvY2xpY2tyX2xvZ2ljL2NvbnRyYWN0LmFsZ28udHM6MTU2LTE2MgogICAgLy8gaXR4bgogICAgLy8gICAucGF5bWVudCh7CiAgICAvLyAgICAgYW1vdW50OiBhdmFpbGFibGVCYWxhbmNlLAogICAgLy8gICAgIHJlY2VpdmVyOiB0aGlzLmhpZ2hlc3RDbGlja0NvdW50QWRkcmVzcy52YWx1ZSwKICAgIC8vICAgICBmZWU6IDAsCiAgICAvLyAgIH0pCiAgICAvLyAgIC5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgLy8gc21hcnRfY29udHJhY3RzL2NsaWNrcl9sb2dpYy9jb250cmFjdC5hbGdvLnRzOjIwCiAgICAvLyBoaWdoZXN0Q2xpY2tDb3VudEFkZHJlc3MgPSBHbG9iYWxTdGF0ZTxBY2NvdW50Pih7IGtleTogJ2QnIH0pCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMyAvLyAiZCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICBpdHhuX2ZpZWxkIFJlY2VpdmVyCiAgICBpdHhuX2ZpZWxkIEFtb3VudAogICAgLy8gc21hcnRfY29udHJhY3RzL2NsaWNrcl9sb2dpYy9jb250cmFjdC5hbGdvLnRzOjE1Ni0xNjEKICAgIC8vIGl0eG4KICAgIC8vICAgLnBheW1lbnQoewogICAgLy8gICAgIGFtb3VudDogYXZhaWxhYmxlQmFsYW5jZSwKICAgIC8vICAgICByZWNlaXZlcjogdGhpcy5oaWdoZXN0Q2xpY2tDb3VudEFkZHJlc3MudmFsdWUsCiAgICAvLyAgICAgZmVlOiAwLAogICAgLy8gICB9KQogICAgaW50Y18xIC8vIDEKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jbGlja3JfbG9naWMvY29udHJhY3QuYWxnby50czoxNjAKICAgIC8vIGZlZTogMCwKICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gc21hcnRfY29udHJhY3RzL2NsaWNrcl9sb2dpYy9jb250cmFjdC5hbGdvLnRzOjE1Ni0xNjIKICAgIC8vIGl0eG4KICAgIC8vICAgLnBheW1lbnQoewogICAgLy8gICAgIGFtb3VudDogYXZhaWxhYmxlQmFsYW5jZSwKICAgIC8vICAgICByZWNlaXZlcjogdGhpcy5oaWdoZXN0Q2xpY2tDb3VudEFkZHJlc3MudmFsdWUsCiAgICAvLyAgICAgZmVlOiAwLAogICAgLy8gICB9KQogICAgLy8gICAuc3VibWl0KCkKICAgIGl0eG5fc3VibWl0CiAgICByZXRzdWIK",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiACAAEmBwFhAWIEFR98dQFkAWMBZwFsMRtBAE2CCgS4RHs2BCkxTZUE/WLGbQSeIPwmBCFmfoYE+69njwQkIdnDBFkzONoEWfvazgSwqTgHNhoAjgoApwCaAI4AdwBgAEkAMgAgAA4AAiJDMRkURDEYRIgBryNDMRkURDEYRDYaARfAHIgBhCNDMRkURDEYRDYaARfAHIgBOSNDMRkURDEYRDYaARfAHIgBDhYqTFCwI0MxGRREMRhENhoBF8AciADfFipMULAjQzEZFEQxGEQ2GgEXwByIAK8WKkxQsCNDMRkURDEYRDYaARfAHIgAgBYqTFCwI0MxGRREMRhEiAA9I0MxGSMSRDEYRIgAGCNDMRkURDEYFESIAAIjQycFImcrMglniTEAKCJmMQApgQVmMQAnBCJmMQAnBiJmiYoAADEARwJLARJESSIpY0REIihjTElPAkRBABKLASMIiwBJTgIoSwJmJwZMZokiQv/sigEBi/8iKGNMSU8CREEABIsATIkiQv/6igEBi/8iJwRjTElPAkRBAASLAEyJIkL/+ooBAYv/IiljTElPAkRBAASLAEyJIkL/+ooBAYv/IicGY0xJTwJEQQAEiwBMiSJC//qKAQCL/yIoY0xJTwJEi/8iJwRjRA1BAAeL/ycEiwBmIicFZUSLAAxBAAknBYsAZyuL/2eL/ygiZomKAQCL/yIpY0REi/8iKWNEIwmL/ylPAmaJMgpzAEQyAQlJRCIrZUQyAxNEsSIrZUSyB7III7IQIrIBs4k=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 5,
            "patch": 3
        }
    },
    "events": [],
    "templateVariables": {}
}