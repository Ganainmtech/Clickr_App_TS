{
  "version": 3,
  "sources": [
    "/Users/sarajane/Documents/AlgoKitProjects/Clickr/Clickr_App_TS/projects/Clickr_App_TS-contracts/smart_contracts/clickr_logic/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;AAGA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;AAAA;;AAyEG;;AAAA;AAAA;AAAA;;AAAA;AAzEH;;;AAAA;AAAA;;AAyEG;;;AAAA;;AAhBA;;AAAA;AAAA;AAAA;;AAAA;AAzDH;;;AAAA;AAAA;;AAyDG;;;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AApDH;;;AAAA;AAAA;;AAoDG;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AA9CH;;;AAAA;AAAA;;AA8CG;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAxCH;;;AAAA;AAAA;;AAwCG;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAhBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AARA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAQqB;;AAhBiB;AAgBM;AAA3C;AACoB;;AAdiB;AAcM;;AAA3C;AAC2B;;AAZiB;AAYM;AAAlD;;AAIF;;;AAGmB;;AAAX;;AAGC;;AAAA;AAAP;AAE6B;AAAA;AA3BQ;AA2BR;AAAA;AAA7B;AAG2C;AAjCN;AAiCM;AAAA;AAAA;AAAA;;AAAA;AAAtB;;;;;AAC+B;AAAtB;AAA9B;;AAlCqC;AAkCrC;;AAAA;;AAD2D;;;;AAK7D;;;AAE+B;;AAAA;AAxCQ;AAwCR;AAAA;AAAA;AAAA;;AAAA;AAAtB;;;;;AAAP;AAAA;AAA6C;;;;AAI/C;;;AAEsC;;AAAA;AAxCQ;AAwCR;AAAA;AAAA;AAAA;;AAAA;AAA7B;;;;;AAAP;AAAA;AAAoD;;;;AAItD;;;AAE+B;;AAAA;AAjDQ;AAiDR;AAAA;AAAA;AAAA;;AAAA;AAAtB;;;;;AAAP;AAAA;AAA6C;;;;AAG/C;;;;;;AAK8C;;AAAA;AA5DP;AA4DO;AAAA;AAAA;AAAA;;AAAA;AAAtB;;;;;;;AAC6B;;AAAA;AAvDP;AAuDO;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAA7B;;;;;AAElB;;AAAA;AAAJ;;;AACE;;AA1D0C;AA0D1C;;AAAA;AAIF;;AApEqC;AAoEA;AAArC;;AAPmE;;;;AADP;;;;;;AAW9D;;;AAEgC;;AAAA;AAtEO;AAsEP;AAAA;AAA9B;AAGsB;;AAAA;AAzEe;AAyEf;AAAA;AAAS;AAA/B;AAAA;;AAzEqC;AAyErC;;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock \"l\" \"h\" \"c\" 0x151f7c75"
    },
    "18": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "20": {
      "op": "bz main_after_if_else@14",
      "stack_out": []
    },
    "23": {
      "op": "pushbytess 0xb8447b36 0x29314d95 0xfd62c66d 0x9e20fc26 0x21667e86 0xfbaf678f 0x593338da 0x59fbdace // method \"createApplication()void\", method \"optIn()void\", method \"recordClick()void\", method \"getClickCount(account)uint64\", method \"getHighestClickCount(account)uint64\", method \"getHeartCount(account)uint64\", method \"clickProcessed(account)void\", method \"decrementHeart(account)void\"",
      "defined_out": [
        "Method(clickProcessed(account)void)",
        "Method(createApplication()void)",
        "Method(decrementHeart(account)void)",
        "Method(getClickCount(account)uint64)",
        "Method(getHeartCount(account)uint64)",
        "Method(getHighestClickCount(account)uint64)",
        "Method(optIn()void)",
        "Method(recordClick()void)"
      ],
      "stack_out": [
        "Method(createApplication()void)",
        "Method(optIn()void)",
        "Method(recordClick()void)",
        "Method(getClickCount(account)uint64)",
        "Method(getHighestClickCount(account)uint64)",
        "Method(getHeartCount(account)uint64)",
        "Method(clickProcessed(account)void)",
        "Method(decrementHeart(account)void)"
      ]
    },
    "65": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(clickProcessed(account)void)",
        "Method(createApplication()void)",
        "Method(decrementHeart(account)void)",
        "Method(getClickCount(account)uint64)",
        "Method(getHeartCount(account)uint64)",
        "Method(getHighestClickCount(account)uint64)",
        "Method(optIn()void)",
        "Method(recordClick()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(createApplication()void)",
        "Method(optIn()void)",
        "Method(recordClick()void)",
        "Method(getClickCount(account)uint64)",
        "Method(getHighestClickCount(account)uint64)",
        "Method(getHeartCount(account)uint64)",
        "Method(clickProcessed(account)void)",
        "Method(decrementHeart(account)void)",
        "tmp%2#0"
      ]
    },
    "68": {
      "op": "match main_createApplication_route@3 main_optIn_route@4 main_recordClick_route@5 main_getClickCount_route@6 main_getHighestClickCount_route@7 main_getHeartCount_route@8 main_clickProcessed_route@9 main_decrementHeart_route@10",
      "stack_out": []
    },
    "86": {
      "block": "main_after_if_else@14",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "87": {
      "op": "return",
      "stack_out": []
    },
    "88": {
      "block": "main_decrementHeart_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "90": {
      "op": "!",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "91": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "92": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "94": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "95": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%4#0"
      ]
    },
    "98": {
      "op": "btoi",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "99": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "101": {
      "callsub": "smart_contracts/clickr_logic/contract.algo.ts::clickrLogic.decrementHeart",
      "op": "callsub decrementHeart",
      "stack_out": []
    },
    "104": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "105": {
      "op": "return",
      "stack_out": []
    },
    "106": {
      "block": "main_clickProcessed_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "108": {
      "op": "!",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "109": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "110": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "112": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "113": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%3#0"
      ]
    },
    "116": {
      "op": "btoi",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "117": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "119": {
      "callsub": "smart_contracts/clickr_logic/contract.algo.ts::clickrLogic.clickProcessed",
      "op": "callsub clickProcessed",
      "stack_out": []
    },
    "122": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "123": {
      "op": "return",
      "stack_out": []
    },
    "124": {
      "block": "main_getHeartCount_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "126": {
      "op": "!",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "127": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "128": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "130": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "131": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%2#0"
      ]
    },
    "134": {
      "op": "btoi",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "135": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "137": {
      "callsub": "smart_contracts/clickr_logic/contract.algo.ts::clickrLogic.getHeartCount",
      "op": "callsub getHeartCount",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "140": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "141": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "0x151f7c75"
      ]
    },
    "142": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ]
    },
    "143": {
      "op": "concat",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "144": {
      "op": "log",
      "stack_out": []
    },
    "145": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "146": {
      "op": "return",
      "stack_out": []
    },
    "147": {
      "block": "main_getHighestClickCount_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "149": {
      "op": "!",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "150": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "151": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "153": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "154": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "157": {
      "op": "btoi",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "158": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "160": {
      "callsub": "smart_contracts/clickr_logic/contract.algo.ts::clickrLogic.getHighestClickCount",
      "op": "callsub getHighestClickCount",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "163": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "164": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "165": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "166": {
      "op": "concat",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "167": {
      "op": "log",
      "stack_out": []
    },
    "168": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "169": {
      "op": "return",
      "stack_out": []
    },
    "170": {
      "block": "main_getClickCount_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "172": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "173": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "174": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "176": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "177": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "180": {
      "op": "btoi",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "181": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "183": {
      "callsub": "smart_contracts/clickr_logic/contract.algo.ts::clickrLogic.getClickCount",
      "op": "callsub getClickCount",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "186": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "187": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "188": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "189": {
      "op": "concat",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "190": {
      "op": "log",
      "stack_out": []
    },
    "191": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "192": {
      "op": "return",
      "stack_out": []
    },
    "193": {
      "block": "main_recordClick_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "195": {
      "op": "!",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "196": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "197": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "199": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "200": {
      "callsub": "smart_contracts/clickr_logic/contract.algo.ts::clickrLogic.recordClick",
      "op": "callsub recordClick"
    },
    "203": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "204": {
      "op": "return",
      "stack_out": []
    },
    "205": {
      "block": "main_optIn_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "207": {
      "op": "intc_1 // OptIn",
      "defined_out": [
        "OptIn",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "OptIn"
      ]
    },
    "208": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "209": {
      "error": "OnCompletion is not OptIn",
      "op": "assert // OnCompletion is not OptIn",
      "stack_out": []
    },
    "210": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "212": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "213": {
      "callsub": "smart_contracts/clickr_logic/contract.algo.ts::clickrLogic.optIn",
      "op": "callsub optIn"
    },
    "216": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "217": {
      "op": "return",
      "stack_out": []
    },
    "218": {
      "block": "main_createApplication_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "220": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "221": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "222": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "224": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "225": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "226": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "227": {
      "op": "return",
      "stack_out": []
    },
    "228": {
      "subroutine": "smart_contracts/clickr_logic/contract.algo.ts::clickrLogic.optIn",
      "params": {},
      "block": "optIn",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "230": {
      "op": "bytec_0 // \"l\"",
      "defined_out": [
        "\"l\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"l\""
      ]
    },
    "231": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"l\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"l\"",
        "0"
      ]
    },
    "232": {
      "op": "app_local_put",
      "stack_out": []
    },
    "233": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "235": {
      "op": "bytec_1 // \"h\"",
      "defined_out": [
        "\"h\"",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "\"h\""
      ]
    },
    "236": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "\"h\"",
        "5",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "\"h\"",
        "5"
      ]
    },
    "238": {
      "op": "app_local_put",
      "stack_out": []
    },
    "239": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "241": {
      "op": "bytec_2 // \"c\"",
      "defined_out": [
        "\"c\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "\"c\""
      ]
    },
    "242": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "\"c\"",
        "0"
      ]
    },
    "243": {
      "op": "app_local_put",
      "stack_out": []
    },
    "244": {
      "retsub": true,
      "op": "retsub"
    },
    "245": {
      "subroutine": "smart_contracts/clickr_logic/contract.algo.ts::clickrLogic.recordClick",
      "params": {},
      "block": "recordClick",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "248": {
      "op": "txn Sender"
    },
    "250": {
      "op": "dupn 2",
      "defined_out": [
        "tmp%0#0",
        "user#0"
      ],
      "stack_out": [
        "user#0",
        "user#0",
        "tmp%0#0"
      ]
    },
    "252": {
      "op": "dig 1",
      "defined_out": [
        "tmp%0#0",
        "user#0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "user#0",
        "user#0",
        "tmp%0#0",
        "user#0 (copy)"
      ]
    },
    "254": {
      "op": "==",
      "defined_out": [
        "tmp%1#0",
        "user#0"
      ],
      "stack_out": [
        "user#0",
        "user#0",
        "tmp%1#0"
      ]
    },
    "255": {
      "error": "Only the user can record a click",
      "op": "assert // Only the user can record a click",
      "stack_out": [
        "user#0",
        "user#0"
      ]
    },
    "256": {
      "op": "dup",
      "stack_out": [
        "user#0",
        "user#0",
        "user#0 (copy)"
      ]
    },
    "257": {
      "op": "intc_0 // 0",
      "stack_out": [
        "user#0",
        "user#0",
        "user#0 (copy)",
        "0"
      ]
    },
    "258": {
      "op": "bytec_1 // \"h\"",
      "defined_out": [
        "\"h\"",
        "0",
        "user#0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "user#0",
        "user#0",
        "user#0 (copy)",
        "0",
        "\"h\""
      ]
    },
    "259": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "user#0"
      ],
      "stack_out": [
        "user#0",
        "user#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "260": {
      "error": "check LocalState exists",
      "op": "assert // check LocalState exists",
      "stack_out": [
        "user#0",
        "user#0",
        "maybe_value%0#0"
      ]
    },
    "261": {
      "error": "Only if user hearts are above 0 record click",
      "op": "assert // Only if user hearts are above 0 record click",
      "stack_out": [
        "user#0",
        "user#0"
      ]
    },
    "262": {
      "op": "intc_0 // 0",
      "stack_out": [
        "user#0",
        "user#0",
        "0"
      ]
    },
    "263": {
      "op": "bytec_0 // \"l\"",
      "defined_out": [
        "\"l\"",
        "0",
        "user#0"
      ],
      "stack_out": [
        "user#0",
        "user#0",
        "0",
        "\"l\""
      ]
    },
    "264": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "user#0"
      ],
      "stack_out": [
        "user#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "265": {
      "op": "swap",
      "stack_out": [
        "user#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ]
    },
    "266": {
      "op": "dup",
      "stack_out": [
        "user#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ]
    },
    "267": {
      "op": "uncover 2",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "user#0"
      ],
      "stack_out": [
        "user#0",
        "maybe_value%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "269": {
      "error": "check LocalState exists",
      "op": "assert // check LocalState exists",
      "stack_out": [
        "user#0",
        "maybe_value%1#0",
        "maybe_value%1#0"
      ]
    },
    "270": {
      "op": "bz recordClick_ternary_false@2",
      "stack_out": [
        "user#0",
        "maybe_value%1#0"
      ]
    },
    "273": {
      "op": "frame_dig 1",
      "defined_out": [
        "currentCount#0",
        "maybe_value%1#0",
        "user#0"
      ],
      "stack_out": [
        "user#0",
        "maybe_value%1#0",
        "currentCount#0"
      ]
    },
    "275": {
      "block": "recordClick_ternary_merge@3",
      "stack_in": [
        "user#0",
        "maybe_value%1#0",
        "currentCount#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "currentCount#0"
      ],
      "stack_out": [
        "user#0",
        "maybe_value%1#0",
        "currentCount#0",
        "1"
      ]
    },
    "276": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "user#0",
        "maybe_value%1#0",
        "new_state_value%0#0"
      ]
    },
    "277": {
      "op": "frame_dig 0",
      "defined_out": [
        "new_state_value%0#0",
        "user#0"
      ],
      "stack_out": [
        "user#0",
        "maybe_value%1#0",
        "new_state_value%0#0",
        "user#0"
      ]
    },
    "279": {
      "op": "bytec_0 // \"l\"",
      "defined_out": [
        "\"l\"",
        "new_state_value%0#0",
        "user#0"
      ],
      "stack_out": [
        "user#0",
        "maybe_value%1#0",
        "new_state_value%0#0",
        "user#0",
        "\"l\""
      ]
    },
    "280": {
      "op": "uncover 2",
      "stack_out": [
        "user#0",
        "maybe_value%1#0",
        "user#0",
        "\"l\"",
        "new_state_value%0#0"
      ]
    },
    "282": {
      "op": "app_local_put",
      "stack_out": [
        "user#0",
        "maybe_value%1#0"
      ]
    },
    "283": {
      "retsub": true,
      "op": "retsub"
    },
    "284": {
      "block": "recordClick_ternary_false@2",
      "stack_in": [
        "user#0",
        "maybe_value%1#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "currentCount#0"
      ],
      "stack_out": [
        "user#0",
        "maybe_value%1#0",
        "currentCount#0"
      ]
    },
    "285": {
      "op": "b recordClick_ternary_merge@3"
    },
    "288": {
      "subroutine": "smart_contracts/clickr_logic/contract.algo.ts::clickrLogic.getClickCount",
      "params": {
        "user#0": "bytes"
      },
      "block": "getClickCount",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "291": {
      "op": "frame_dig -1",
      "defined_out": [
        "user#0 (copy)"
      ],
      "stack_out": [
        "user#0 (copy)"
      ]
    },
    "293": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "user#0 (copy)",
        "0"
      ]
    },
    "294": {
      "op": "bytec_0 // \"l\"",
      "defined_out": [
        "\"l\"",
        "0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "user#0 (copy)",
        "0",
        "\"l\""
      ]
    },
    "295": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "296": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "297": {
      "op": "dup",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "298": {
      "op": "uncover 2",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "300": {
      "error": "check LocalState exists",
      "op": "assert // check LocalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0"
      ]
    },
    "301": {
      "op": "bz getClickCount_ternary_false@2",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "304": {
      "op": "frame_dig 0",
      "defined_out": [
        "maybe_value%0#0",
        "ternary_result%0#1"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "ternary_result%0#1"
      ]
    },
    "306": {
      "block": "getClickCount_ternary_merge@3",
      "stack_in": [
        "maybe_value%0#0",
        "ternary_result%0#1"
      ],
      "op": "swap",
      "defined_out": [
        "ternary_result%0#1"
      ]
    },
    "307": {
      "retsub": true,
      "op": "retsub"
    },
    "308": {
      "block": "getClickCount_ternary_false@2",
      "stack_in": [
        "maybe_value%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "ternary_result%0#1"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "ternary_result%0#1"
      ]
    },
    "309": {
      "op": "b getClickCount_ternary_merge@3"
    },
    "312": {
      "subroutine": "smart_contracts/clickr_logic/contract.algo.ts::clickrLogic.getHighestClickCount",
      "params": {
        "user#0": "bytes"
      },
      "block": "getHighestClickCount",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "315": {
      "op": "frame_dig -1",
      "defined_out": [
        "user#0 (copy)"
      ],
      "stack_out": [
        "user#0 (copy)"
      ]
    },
    "317": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "user#0 (copy)",
        "0"
      ]
    },
    "318": {
      "op": "bytec_2 // \"c\"",
      "defined_out": [
        "\"c\"",
        "0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "user#0 (copy)",
        "0",
        "\"c\""
      ]
    },
    "319": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "320": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "321": {
      "op": "dup",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "322": {
      "op": "uncover 2",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "324": {
      "error": "check LocalState exists",
      "op": "assert // check LocalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0"
      ]
    },
    "325": {
      "op": "bz getHighestClickCount_ternary_false@2",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "328": {
      "op": "frame_dig 0",
      "defined_out": [
        "maybe_value%0#0",
        "ternary_result%0#1"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "ternary_result%0#1"
      ]
    },
    "330": {
      "block": "getHighestClickCount_ternary_merge@3",
      "stack_in": [
        "maybe_value%0#0",
        "ternary_result%0#1"
      ],
      "op": "swap",
      "defined_out": [
        "ternary_result%0#1"
      ]
    },
    "331": {
      "retsub": true,
      "op": "retsub"
    },
    "332": {
      "block": "getHighestClickCount_ternary_false@2",
      "stack_in": [
        "maybe_value%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "ternary_result%0#1"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "ternary_result%0#1"
      ]
    },
    "333": {
      "op": "b getHighestClickCount_ternary_merge@3"
    },
    "336": {
      "subroutine": "smart_contracts/clickr_logic/contract.algo.ts::clickrLogic.getHeartCount",
      "params": {
        "user#0": "bytes"
      },
      "block": "getHeartCount",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "339": {
      "op": "frame_dig -1",
      "defined_out": [
        "user#0 (copy)"
      ],
      "stack_out": [
        "user#0 (copy)"
      ]
    },
    "341": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "user#0 (copy)",
        "0"
      ]
    },
    "342": {
      "op": "bytec_1 // \"h\"",
      "defined_out": [
        "\"h\"",
        "0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "user#0 (copy)",
        "0",
        "\"h\""
      ]
    },
    "343": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "344": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "345": {
      "op": "dup",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "346": {
      "op": "uncover 2",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "348": {
      "error": "check LocalState exists",
      "op": "assert // check LocalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0"
      ]
    },
    "349": {
      "op": "bz getHeartCount_ternary_false@2",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "352": {
      "op": "frame_dig 0",
      "defined_out": [
        "maybe_value%0#0",
        "ternary_result%0#1"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "ternary_result%0#1"
      ]
    },
    "354": {
      "block": "getHeartCount_ternary_merge@3",
      "stack_in": [
        "maybe_value%0#0",
        "ternary_result%0#1"
      ],
      "op": "swap",
      "defined_out": [
        "ternary_result%0#1"
      ]
    },
    "355": {
      "retsub": true,
      "op": "retsub"
    },
    "356": {
      "block": "getHeartCount_ternary_false@2",
      "stack_in": [
        "maybe_value%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "ternary_result%0#1"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "ternary_result%0#1"
      ]
    },
    "357": {
      "op": "b getHeartCount_ternary_merge@3"
    },
    "360": {
      "subroutine": "smart_contracts/clickr_logic/contract.algo.ts::clickrLogic.clickProcessed",
      "params": {
        "user#0": "bytes"
      },
      "block": "clickProcessed",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "363": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "currentClicks#0"
      ]
    },
    "365": {
      "op": "dup",
      "stack_out": [
        "currentClicks#0",
        "maybe_value%1#0"
      ]
    },
    "366": {
      "op": "frame_dig -1",
      "defined_out": [
        "user#0 (copy)"
      ],
      "stack_out": [
        "currentClicks#0",
        "maybe_value%1#0",
        "user#0 (copy)"
      ]
    },
    "368": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "currentClicks#0",
        "maybe_value%1#0",
        "user#0 (copy)",
        "0"
      ]
    },
    "369": {
      "op": "bytec_0 // \"l\"",
      "defined_out": [
        "\"l\"",
        "0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "currentClicks#0",
        "maybe_value%1#0",
        "user#0 (copy)",
        "0",
        "\"l\""
      ]
    },
    "370": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "currentClicks#0",
        "maybe_value%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "371": {
      "op": "swap",
      "stack_out": [
        "currentClicks#0",
        "maybe_value%1#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "372": {
      "op": "dup",
      "stack_out": [
        "currentClicks#0",
        "maybe_value%1#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "373": {
      "op": "uncover 2",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "currentClicks#0",
        "maybe_value%1#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "375": {
      "error": "check LocalState exists",
      "op": "assert // check LocalState exists",
      "stack_out": [
        "currentClicks#0",
        "maybe_value%1#0",
        "maybe_value%0#0",
        "maybe_value%0#0"
      ]
    },
    "376": {
      "op": "bz clickProcessed_ternary_false@2",
      "stack_out": [
        "currentClicks#0",
        "maybe_value%1#0",
        "maybe_value%0#0"
      ]
    },
    "379": {
      "op": "frame_dig 2",
      "defined_out": [
        "currentClicks#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "currentClicks#0",
        "maybe_value%1#0",
        "maybe_value%0#0",
        "currentClicks#0"
      ]
    },
    "381": {
      "op": "frame_bury 0",
      "defined_out": [
        "currentClicks#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "currentClicks#0",
        "maybe_value%1#0",
        "maybe_value%0#0"
      ]
    },
    "383": {
      "block": "clickProcessed_ternary_merge@3",
      "stack_in": [
        "currentClicks#0",
        "maybe_value%1#0",
        "maybe_value%0#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "user#0 (copy)"
      ],
      "stack_out": [
        "currentClicks#0",
        "maybe_value%1#0",
        "maybe_value%0#0",
        "user#0 (copy)"
      ]
    },
    "385": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "currentClicks#0",
        "maybe_value%1#0",
        "maybe_value%0#0",
        "user#0 (copy)",
        "0"
      ]
    },
    "386": {
      "op": "bytec_2 // \"c\"",
      "defined_out": [
        "\"c\"",
        "0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "currentClicks#0",
        "maybe_value%1#0",
        "maybe_value%0#0",
        "user#0 (copy)",
        "0",
        "\"c\""
      ]
    },
    "387": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "currentClicks#0",
        "maybe_value%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "388": {
      "op": "swap",
      "stack_out": [
        "currentClicks#0",
        "maybe_value%1#0",
        "maybe_value%0#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ]
    },
    "389": {
      "op": "dup",
      "stack_out": [
        "currentClicks#0",
        "maybe_value%1#0",
        "maybe_value%0#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ]
    },
    "390": {
      "op": "cover 2",
      "stack_out": [
        "currentClicks#0",
        "maybe_value%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ]
    },
    "392": {
      "op": "frame_bury 1",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "currentClicks#0",
        "maybe_value%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "394": {
      "error": "check LocalState exists",
      "op": "assert // check LocalState exists",
      "stack_out": [
        "currentClicks#0",
        "maybe_value%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "395": {
      "op": "bz clickProcessed_ternary_false@5",
      "stack_out": [
        "currentClicks#0",
        "maybe_value%1#0",
        "maybe_value%0#0"
      ]
    },
    "398": {
      "op": "frame_dig 1",
      "defined_out": [
        "highestClicks#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "currentClicks#0",
        "maybe_value%1#0",
        "maybe_value%0#0",
        "highestClicks#0"
      ]
    },
    "400": {
      "block": "clickProcessed_ternary_merge@6",
      "stack_in": [
        "currentClicks#0",
        "maybe_value%1#0",
        "maybe_value%0#0",
        "highestClicks#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "currentClicks#0"
      ],
      "stack_out": [
        "currentClicks#0",
        "maybe_value%1#0",
        "maybe_value%0#0",
        "highestClicks#0",
        "currentClicks#0"
      ]
    },
    "402": {
      "op": "<",
      "defined_out": [
        "currentClicks#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "currentClicks#0",
        "maybe_value%1#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ]
    },
    "403": {
      "op": "bz clickProcessed_after_if_else@8",
      "stack_out": [
        "currentClicks#0",
        "maybe_value%1#0",
        "maybe_value%0#0"
      ]
    },
    "406": {
      "op": "frame_dig -1",
      "defined_out": [
        "currentClicks#0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "currentClicks#0",
        "maybe_value%1#0",
        "maybe_value%0#0",
        "user#0 (copy)"
      ]
    },
    "408": {
      "op": "bytec_2 // \"c\"",
      "defined_out": [
        "\"c\"",
        "currentClicks#0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "currentClicks#0",
        "maybe_value%1#0",
        "maybe_value%0#0",
        "user#0 (copy)",
        "\"c\""
      ]
    },
    "409": {
      "op": "frame_dig 0",
      "stack_out": [
        "currentClicks#0",
        "maybe_value%1#0",
        "maybe_value%0#0",
        "user#0 (copy)",
        "\"c\"",
        "currentClicks#0"
      ]
    },
    "411": {
      "op": "app_local_put",
      "stack_out": [
        "currentClicks#0",
        "maybe_value%1#0",
        "maybe_value%0#0"
      ]
    },
    "412": {
      "block": "clickProcessed_after_if_else@8",
      "stack_in": [
        "currentClicks#0",
        "maybe_value%1#0",
        "maybe_value%0#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "user#0 (copy)"
      ],
      "stack_out": [
        "currentClicks#0",
        "maybe_value%1#0",
        "maybe_value%0#0",
        "user#0 (copy)"
      ]
    },
    "414": {
      "op": "bytec_0 // \"l\"",
      "defined_out": [
        "\"l\"",
        "user#0 (copy)"
      ],
      "stack_out": [
        "currentClicks#0",
        "maybe_value%1#0",
        "maybe_value%0#0",
        "user#0 (copy)",
        "\"l\""
      ]
    },
    "415": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"l\"",
        "0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "currentClicks#0",
        "maybe_value%1#0",
        "maybe_value%0#0",
        "user#0 (copy)",
        "\"l\"",
        "0"
      ]
    },
    "416": {
      "op": "app_local_put",
      "stack_out": [
        "currentClicks#0",
        "maybe_value%1#0",
        "maybe_value%0#0"
      ]
    },
    "417": {
      "retsub": true,
      "op": "retsub"
    },
    "418": {
      "block": "clickProcessed_ternary_false@5",
      "stack_in": [
        "currentClicks#0",
        "maybe_value%1#0",
        "maybe_value%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "highestClicks#0"
      ],
      "stack_out": [
        "currentClicks#0",
        "maybe_value%1#0",
        "maybe_value%0#0",
        "highestClicks#0"
      ]
    },
    "419": {
      "op": "b clickProcessed_ternary_merge@6"
    },
    "422": {
      "block": "clickProcessed_ternary_false@2",
      "stack_in": [
        "currentClicks#0",
        "maybe_value%1#0",
        "maybe_value%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "currentClicks#0"
      ],
      "stack_out": [
        "currentClicks#0",
        "maybe_value%1#0",
        "maybe_value%0#0",
        "currentClicks#0"
      ]
    },
    "423": {
      "op": "frame_bury 0",
      "defined_out": [
        "currentClicks#0"
      ],
      "stack_out": [
        "currentClicks#0",
        "maybe_value%1#0",
        "maybe_value%0#0"
      ]
    },
    "425": {
      "op": "b clickProcessed_ternary_merge@3"
    },
    "428": {
      "subroutine": "smart_contracts/clickr_logic/contract.algo.ts::clickrLogic.decrementHeart",
      "params": {
        "user#0": "bytes"
      },
      "block": "decrementHeart",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "431": {
      "op": "frame_dig -1",
      "defined_out": [
        "user#0 (copy)"
      ],
      "stack_out": [
        "user#0 (copy)"
      ]
    },
    "433": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "user#0 (copy)",
        "0"
      ]
    },
    "434": {
      "op": "bytec_1 // \"h\"",
      "defined_out": [
        "\"h\"",
        "0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "user#0 (copy)",
        "0",
        "\"h\""
      ]
    },
    "435": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "436": {
      "error": "check LocalState exists",
      "op": "assert // check LocalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "437": {
      "error": "To decrement hearts there has to be atleast 1",
      "op": "assert // To decrement hearts there has to be atleast 1",
      "stack_out": []
    },
    "438": {
      "op": "frame_dig -1",
      "stack_out": [
        "user#0 (copy)"
      ]
    },
    "440": {
      "op": "intc_0 // 0",
      "stack_out": [
        "user#0 (copy)",
        "0"
      ]
    },
    "441": {
      "op": "bytec_1 // \"h\"",
      "stack_out": [
        "user#0 (copy)",
        "0",
        "\"h\""
      ]
    },
    "442": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "443": {
      "error": "check LocalState exists",
      "op": "assert // check LocalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "444": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "1"
      ]
    },
    "445": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "446": {
      "op": "frame_dig -1",
      "stack_out": [
        "new_state_value%0#0",
        "user#0 (copy)"
      ]
    },
    "448": {
      "op": "bytec_1 // \"h\"",
      "stack_out": [
        "new_state_value%0#0",
        "user#0 (copy)",
        "\"h\""
      ]
    },
    "449": {
      "op": "uncover 2",
      "stack_out": [
        "user#0 (copy)",
        "\"h\"",
        "new_state_value%0#0"
      ]
    },
    "451": {
      "op": "app_local_put",
      "stack_out": []
    },
    "452": {
      "retsub": true,
      "op": "retsub"
    }
  }
}